<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Artsy Engineering]]></title>
  <link href="http://artsy.github.io/atom.xml" rel="self"/>
  <link href="http://artsy.github.io/"/>
  <updated>2014-05-12T14:36:56-04:00</updated>
  <id>http://artsy.github.io/</id>
  <author>
    <name><![CDATA[Artsy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Continuous integration for service-oriented architectures]]></title>
    <link href="http://artsy.github.io/blog/2014/05/12/continuous-integration-for-service-oriented-architectures/"/>
    <updated>2014-05-12T10:50:00-04:00</updated>
    <id>http://artsy.github.io/blog/2014/05/12/continuous-integration-for-service-oriented-architectures</id>
    <content type="html"><![CDATA[<p>Whatever you have against monolithic architectures, at least they&#8217;re easy to test. And when those tests succeed, you can be reasonably confident the live app will work the same way.</p>

<p>Artsy began as one such monolithic app, but we&#8217;ve been refactoring into an ecosystem of related APIs and sites. Today, when you search for <a href="https://artsy.net/gene/cultural-commentary">&#8220;cultural commentary&#8221;</a> or visit <a href="https://artsy.net/artist/robert-longo">Robert Longo</a> on <a href="https://artsy.net">artsy.net</a>, the page is rendered by a web app, sources data from an API, retrieves recommendations from a separate service, tracks trends in another, and records analytics in yet another.</p>

<p>This was a boost for developer productivity and scaling, but eviscerated the value of our tests. We repeatedly encountered bugs that were failings of <em>the interaction between codebases</em> rather than failings of individual ones. Test libraries and tools typically concern themselves with one isolated app. When you have services that consume services that consume services, those isolated tests (with their stubs of everything else) don&#8217;t necessarily reflect production&#8217;s reality.</p>

<p>So how should we develop our small, focused apps (or <a href="http://en.wikipedia.org/wiki/Service-oriented_architecture">service-oriented architecture</a>, or <a href="http://martinfowler.com/articles/microservices.html">microservices</a>&#8230;) with confidence? We set out to build a dedicated acceptance test suite that would run tests across multiple services, configuring and integrating them in a way that closely matches the production environment.</p>

<!-- more -->


<h2>The code</h2>

<p>We&#8217;ll take the simplest example possible of 2 related applications: a trivial Ruby API serving a Node.js-based web app. (You can also go directly to <a href="https://github.com/joeyAghion/multiapp_example-tests">the source</a>.)</p>

<p><a href="http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html">Recent</a> <a href="http://blog.8thlight.com/uncle-bob/2014/04/25/MonogamousTDD.html">debates</a> <a href="https://news.ycombinator.com/item?id=7659251">aside</a>, I like to start with a test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">feature</span> <span class="s2">&quot;home&quot;</span><span class="p">,</span> <span class="ss">js</span><span class="p">:</span> <span class="kp">true</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">scenario</span> <span class="s2">&quot;welcomes visitor&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">visit</span> <span class="s2">&quot;/&quot;</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_content</span><span class="p">(</span><span class="s2">&quot;Browse products&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;re using the popular [and familiar] <a href="https://github.com/jnicklas/capybara">Capybara</a> with <a href="https://relishapp.com/rspec">RSpec</a> and <a href="http://docs.seleniumhq.org/">Selenium</a>. Naturally, our test fails right away:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rspec
</span><span class='line'><span class="c"># ...</span>
</span><span class='line'>     Failure/Error: visit <span class="s2">&quot;/&quot;</span>
</span><span class='line'>     Selenium::WebDriver::Error::UnknownError:
</span><span class='line'>       Target URL / is not well-formed.
</span></code></pre></td></tr></table></div></figure>


<p>There are a few steps to getting our projects installed and running as part of the test suite. First, we&#8217;ll add git submodules in the <code>/api</code> and <code>/web</code> subdirectories that <a href="http://stackoverflow.com/questions/9189575/git-submodule-tracking-latest">track the master branch</a> of each project.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git submodule add -b master git@github.com:joeyAghion/multiapp_example-api.git api
</span><span class='line'>git submodule add -b master git@github.com:joeyAghion/multiapp_example-web.git web
</span></code></pre></td></tr></table></div></figure>


<p>Next, create Rake tasks to install prerequisites for each project.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Rakefile</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;childprocess&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;rspec/core/rake_task&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="ss">RSpec</span><span class="p">:</span><span class="ss">:Core</span><span class="o">::</span><span class="no">RakeTask</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:spec</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="ss">:ci</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;checkout&#39;</span><span class="p">,</span> <span class="s1">&#39;install&#39;</span><span class="p">,</span> <span class="s1">&#39;spec&#39;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="ss">:checkout</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">sh</span> <span class="sx">%{git submodule update --remote --init}</span> <span class="k">do</span> <span class="o">|</span><span class="n">ok</span><span class="p">,</span> <span class="n">res</span><span class="o">|</span>
</span><span class='line'>    <span class="k">raise</span> <span class="s2">&quot;Submodule update failed with status </span><span class="si">#{</span><span class="n">res</span><span class="o">.</span><span class="n">exitstatus</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">unless</span> <span class="n">ok</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="ss">:install</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;api:install&#39;</span><span class="p">,</span> <span class="s1">&#39;web:install&#39;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:api</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:install</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">Bundler</span><span class="o">.</span><span class="n">with_clean_env</span> <span class="k">do</span>
</span><span class='line'>      <span class="nb">proc</span> <span class="o">=</span> <span class="no">ChildProcess</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="s1">&#39;bundle&#39;</span><span class="p">,</span> <span class="s1">&#39;install&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">proc</span><span class="o">.</span><span class="n">io</span><span class="o">.</span><span class="n">inherit!</span>
</span><span class='line'>      <span class="nb">proc</span><span class="o">.</span><span class="n">cwd</span> <span class="o">=</span> <span class="s1">&#39;./api&#39;</span>
</span><span class='line'>      <span class="nb">proc</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'>      <span class="nb">proc</span><span class="o">.</span><span class="n">wait</span>
</span><span class='line'>      <span class="k">raise</span> <span class="s2">&quot;bundle install exited with status </span><span class="si">#{</span><span class="nb">proc</span><span class="o">.</span><span class="n">exit_code</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">unless</span> <span class="nb">proc</span><span class="o">.</span><span class="n">exit_code</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:web</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:install</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">proc</span> <span class="o">=</span> <span class="no">ChildProcess</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="s1">&#39;npm&#39;</span><span class="p">,</span> <span class="s1">&#39;install&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">proc</span><span class="o">.</span><span class="n">io</span><span class="o">.</span><span class="n">inherit!</span>
</span><span class='line'>    <span class="nb">proc</span><span class="o">.</span><span class="n">cwd</span> <span class="o">=</span> <span class="s1">&#39;./web&#39;</span>
</span><span class='line'>    <span class="nb">proc</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'>    <span class="nb">proc</span><span class="o">.</span><span class="n">wait</span>
</span><span class='line'>    <span class="k">raise</span> <span class="s2">&quot;npm install existed with status </span><span class="si">#{</span><span class="nb">proc</span><span class="o">.</span><span class="n">exit_code</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">unless</span> <span class="nb">proc</span><span class="o">.</span><span class="n">exit_code</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The new <code>checkout</code> and <code>install</code> tasks make sure we have the latest code and all prerequisites installed. Note how we use <code>Bundler.with_clean_env</code> to isolate the API (which has its own Gemfile and bundler environment) from the test suite.</p>

<p>Now that the API and web apps are set up, we&#8217;ll use RSpec&#8217;s <code>before(:suite)</code> and <code>after(:suite)</code> hooks to start and stop them around each test run.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># spec/spec_helper.rb</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capybara/rspec&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;childprocess&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">API_PORT</span> <span class="o">=</span> <span class="mi">7000</span>
</span><span class='line'><span class="no">WEB_PORT</span> <span class="o">=</span> <span class="mi">7001</span>
</span><span class='line'>
</span><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">current_driver</span> <span class="o">=</span> <span class="ss">:selenium</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">run_server</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">app_host</span> <span class="o">=</span> <span class="s2">&quot;http://localhost:</span><span class="si">#{</span><span class="no">WEB_PORT</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">before</span><span class="p">(</span><span class="ss">:suite</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">start_api</span>
</span><span class='line'>    <span class="n">start_web</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">after</span><span class="p">(</span><span class="ss">:suite</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">stop_api</span>
</span><span class='line'>    <span class="n">stop_web</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">start_api</span>
</span><span class='line'>  <span class="vg">$stderr</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;Starting API...&quot;</span>
</span><span class='line'>  <span class="no">Bundler</span><span class="o">.</span><span class="n">with_clean_env</span> <span class="k">do</span>
</span><span class='line'>    <span class="vg">$api</span> <span class="o">=</span> <span class="no">ChildProcess</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="s1">&#39;bundle&#39;</span><span class="p">,</span> <span class="s1">&#39;exec&#39;</span><span class="p">,</span> <span class="s1">&#39;ruby&#39;</span><span class="p">,</span> <span class="s1">&#39;app.rb&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="vg">$api</span><span class="o">.</span><span class="n">cwd</span> <span class="o">=</span> <span class="s1">&#39;./api&#39;</span>
</span><span class='line'>    <span class="vg">$api</span><span class="o">.</span><span class="n">io</span><span class="o">.</span><span class="n">inherit!</span>
</span><span class='line'>    <span class="vg">$api</span><span class="o">.</span><span class="n">environment</span><span class="o">[</span><span class="s1">&#39;PORT&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="no">API_PORT</span>
</span><span class='line'>    <span class="vg">$api</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'>    <span class="vg">$stderr</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;Waiting for API to start listening...&quot;</span>
</span><span class='line'>    <span class="nb">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">while</span> <span class="o">!</span><span class="n">listening_on?</span><span class="p">(</span><span class="no">API_PORT</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="vg">$api</span><span class="o">.</span><span class="n">alive?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">stop_api</span>
</span><span class='line'>  <span class="vg">$stderr</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;Stopping API...&quot;</span>
</span><span class='line'>  <span class="vg">$api</span><span class="o">.</span><span class="n">stop</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">start_web</span>
</span><span class='line'>  <span class="vg">$stderr</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;Starting web...&quot;</span>
</span><span class='line'>  <span class="vg">$web</span> <span class="o">=</span> <span class="no">ChildProcess</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="s1">&#39;node&#39;</span><span class="p">,</span> <span class="s1">&#39;app.js&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="vg">$web</span><span class="o">.</span><span class="n">cwd</span> <span class="o">=</span> <span class="s1">&#39;./web&#39;</span>
</span><span class='line'>  <span class="vg">$web</span><span class="o">.</span><span class="n">io</span><span class="o">.</span><span class="n">inherit!</span>
</span><span class='line'>  <span class="vg">$web</span><span class="o">.</span><span class="n">environment</span><span class="o">[</span><span class="s1">&#39;API_URL&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;http://localhost:</span><span class="si">#{</span><span class="no">API_PORT</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="vg">$web</span><span class="o">.</span><span class="n">environment</span><span class="o">[</span><span class="s1">&#39;PORT&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="no">WEB_PORT</span>
</span><span class='line'>  <span class="vg">$web</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'>  <span class="vg">$stderr</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;Waiting for web to start listening...&quot;</span>
</span><span class='line'>  <span class="nb">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">while</span> <span class="o">!</span><span class="n">listening_on?</span><span class="p">(</span><span class="no">WEB_PORT</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="vg">$web</span><span class="o">.</span><span class="n">alive?</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">stop_web</span>
</span><span class='line'>  <span class="vg">$stderr</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;Stopping web...&quot;</span>
</span><span class='line'>  <span class="vg">$web</span><span class="o">.</span><span class="n">stop</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">listening_on?</span><span class="p">(</span><span class="n">port</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">system</span><span class="p">(</span><span class="s2">&quot;netstat -an | grep </span><span class="si">#{</span><span class="n">port</span><span class="si">}</span><span class="s2"> | grep LISTEN&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running <code>rake spec</code> now starts up and waits for both apps, runs our test, and&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Starting</span> <span class="no">API</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="no">Waiting</span> <span class="k">for</span> <span class="no">API</span> <span class="n">to</span> <span class="n">start</span> <span class="n">listening</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="c1"># ...</span>
</span><span class='line'><span class="no">Starting</span> <span class="n">web</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="no">Waiting</span> <span class="k">for</span> <span class="n">web</span> <span class="n">to</span> <span class="n">start</span> <span class="n">listening</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="c1"># ...</span>
</span><span class='line'><span class="n">home</span>
</span><span class='line'>  <span class="n">welcomes</span> <span class="n">visitor</span>
</span><span class='line'><span class="no">Stopping</span> <span class="no">API</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="c1"># ...</span>
</span><span class='line'><span class="no">Stopping</span> <span class="n">web</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="no">Finished</span> <span class="k">in</span> <span class="mi">4</span><span class="o">.</span><span class="mi">67</span> <span class="n">seconds</span>
</span><span class='line'><span class="mi">1</span> <span class="n">example</span><span class="p">,</span> <span class="mi">0</span> <span class="n">failures</span>
</span></code></pre></td></tr></table></div></figure>


<p>Success!</p>

<p>Well, sort of. Our test of the home page doesn&#8217;t even depend on both systems. Let&#8217;s try a more meaningful test, listing products from the API.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">feature</span> <span class="s2">&quot;shop&quot;</span><span class="p">,</span> <span class="ss">js</span><span class="p">:</span> <span class="kp">true</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">scenario</span> <span class="s2">&quot;list widgets&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">visit</span> <span class="s2">&quot;/&quot;</span>
</span><span class='line'>    <span class="n">click_link</span> <span class="s2">&quot;Browse products&quot;</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_content</span><span class="p">(</span><span class="s2">&quot;Foo Widget&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Will it work?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Failures:
</span><span class='line'>
</span><span class='line'>  1<span class="o">)</span> shop list widgets
</span><span class='line'>     Failure/Error: expect<span class="o">(</span>page<span class="o">)</span>.to have_content<span class="o">(</span><span class="s2">&quot;Foo Widget&quot;</span><span class="o">)</span>
</span><span class='line'>       expected to find text <span class="s2">&quot;Foo Widget&quot;</span> in <span class="s2">&quot;&quot;</span>
</span><span class='line'>     <span class="c"># ./spec/shop_spec.rb:8:in `block (2 levels) in &lt;top (required)&gt;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The web app isn&#8217;t authenticated to use the API! This brings up a more general question:</p>

<h2>How to bootstrap test data</h2>

<p>Most testing frameworks offer fixtures or direct access to the database. Because the API runs in a separate process, things are a little more difficult. We opt for 1 of 2 approaches, depending on the context:</p>

<ul>
<li><strong>Insert data directly into the API&#8217;s database.</strong> We tend to do this only as a last resort, because tests would presume knowledge of the API&#8217;s implementation.</li>
<li><strong>Perform test set-up via the API.</strong> Slightly nicer, and closer to real-life clients. (However, the API must be fairly complete.)</li>
</ul>


<p>In practice, we &#8220;cheat&#8221; and use direct database-insertion to initially bootstrap an API client application, then perform further test set-up through the API. You should choose what&#8217;s most convenient.</p>

<p>Our simple example will register the web application as an API client, then pass a key via basic authentication. We&#8217;ll have to modify the <code>start_web</code> helper:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">start_web</span>
</span><span class='line'>  <span class="vg">$stderr</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;Starting web...&quot;</span>
</span><span class='line'>  <span class="vg">$web</span> <span class="o">=</span> <span class="no">ChildProcess</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="s1">&#39;node&#39;</span><span class="p">,</span> <span class="s1">&#39;app.js&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="vg">$web</span><span class="o">.</span><span class="n">cwd</span> <span class="o">=</span> <span class="s1">&#39;./web&#39;</span>
</span><span class='line'>  <span class="vg">$web</span><span class="o">.</span><span class="n">io</span><span class="o">.</span><span class="n">inherit!</span>
</span><span class='line'>  <span class="vg">$api_base_url</span> <span class="o">=</span> <span class="s2">&quot;http://</span><span class="si">#{</span><span class="n">api_client</span><span class="o">[</span><span class="s1">&#39;key&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">:@localhost:</span><span class="si">#{</span><span class="no">API_PORT</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="vg">$web</span><span class="o">.</span><span class="n">environment</span><span class="o">[</span><span class="s1">&#39;API_URL&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="vg">$api_base_url</span>
</span><span class='line'>  <span class="vg">$web</span><span class="o">.</span><span class="n">environment</span><span class="o">[</span><span class="s1">&#39;PORT&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="no">WEB_PORT</span>
</span><span class='line'>  <span class="vg">$web</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'>  <span class="vg">$stderr</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;Waiting for web to start listening...&quot;</span>
</span><span class='line'>  <span class="nb">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">while</span> <span class="o">!</span><span class="n">listening_on?</span><span class="p">(</span><span class="no">WEB_PORT</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="vg">$web</span><span class="o">.</span><span class="n">alive?</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">api_client</span>
</span><span class='line'>  <span class="vg">$api_client</span> <span class="o">||=</span> <span class="k">begin</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="ss">Net</span><span class="p">:</span><span class="ss">:HTTP</span><span class="o">.</span><span class="n">post_form</span><span class="p">(</span><span class="no">URI</span><span class="p">(</span><span class="s2">&quot;http://localhost:</span><span class="si">#{</span><span class="no">API_PORT</span><span class="si">}</span><span class="s2">/api/clients&quot;</span><span class="p">),</span> <span class="p">{})</span>
</span><span class='line'>    <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the test will need to set up the data it expects to find listed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">feature</span> <span class="s2">&quot;shop&quot;</span><span class="p">,</span> <span class="ss">js</span><span class="p">:</span> <span class="kp">true</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">scenario</span> <span class="s2">&quot;list widgets&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">create_widget</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Foo Widget&#39;</span><span class="p">,</span> <span class="n">price_cents</span><span class="p">:</span> <span class="mi">100_00</span><span class="p">)</span>
</span><span class='line'>    <span class="n">visit</span> <span class="s2">&quot;/&quot;</span>
</span><span class='line'>    <span class="n">click_link</span> <span class="s2">&quot;Browse products&quot;</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_content</span><span class="p">(</span><span class="s2">&quot;Foo Widget&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># spec/spec_helper.rb</span>
</span><span class='line'><span class="k">def</span> <span class="nf">create_widget</span><span class="p">(</span><span class="n">params</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>  <span class="ss">Net</span><span class="p">:</span><span class="ss">:HTTP</span><span class="o">.</span><span class="n">post_form</span><span class="p">(</span><span class="no">URI</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="vg">$api_base_url</span><span class="si">}</span><span class="s2">/api/widgets&quot;</span><span class="p">),</span> <span class="n">params</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lo and behold, our entire &#8220;suite&#8221; now passes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>2 examples, 0 failures
</span></code></pre></td></tr></table></div></figure>


<p>This basic structure has accommodated dozens of test scenarios. We&#8217;ve extended it with database- and cache-clearing between tests, and organized helpers into modules under <code>spec/support</code>. The suite is built nightly against the latest versions of our codebases, and has caught a few significant bugs.</p>

<p>A caveat: with so many layers and dependencies involved, there are often spurious failures. We&#8217;ve picked up a few practices that help:</p>

<ul>
<li><a href="http://artsy.github.io/blog/2012/05/15/how-to-organize-over-3000-rspec-specs-and-retry-test-failures/">Automatic retries</a></li>
<li><a href="http://artsy.github.io/blog/2014/01/30/isolating-spurious-and-nondeterministic-tests/">Quarantine for problematic tests</a></li>
<li><a href="https://github.com/mattheworiordan/capybara-screenshot">Failure screenshots</a></li>
</ul>


<p>You can <a href="https://github.com/joeyAghion/multiapp_example-tests">grab the example code</a>. And make sure to let us know in the comments how <em>you</em> approach testing across applications.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generating Notifications and Personalized Emails Efficiently]]></title>
    <link href="http://artsy.github.io/blog/2014/04/24/generating-notifications-and-personalized-emails-efficiently/"/>
    <updated>2014-04-24T16:00:00-04:00</updated>
    <id>http://artsy.github.io/blog/2014/04/24/generating-notifications-and-personalized-emails-efficiently</id>
    <content type="html"><![CDATA[<p>We recently launched a new personalized email here at <a href="https://artsy.net">Artsy</a> that features content that a given user might find interesting. The goal of this post is to describe how we built a backend system that efficiently generates these e-mails for all our users. I&#8217;ll talk about the first, naive implementation that had performance problems right away, and how the second implementation (currently in production) solved those issues, and whose behavior at scale is well-defined and understood. I won&#8217;t go into the details of the design and layout of the mail itself and how we render the content - there are several earlier blog posts that deal with those: <a href="http://artsy.github.io/blog/2014/03/18/presenters-and-memoization-moving-logic-out-of-templates/">Presenters and Memoization</a>, <a href="http://artsy.github.io/blog/2014/03/17/ruby-helper-to-group-artworks-into-a-pinterest-style-layout-for-email/">Pinterest-style Layouts</a> and <a href="http://artsy.github.io/blog/2014/03/17/some-tips-for-email-layout-and-responsiveness/">Email Layouts and Responsiveness</a>.</p>

<p><img src="http://artsy.github.io/images/2014-04-24-generating-notifications-and-personalized-emails-efficiently/percy_example.png" alt="Personalized Email Example" /></p>

<!-- more -->


<h3>Deciding What Content to Include</h3>

<p>First, we had to decide what types of personalized content we wanted to feature in our mails. Users can follow artists and galleries, and so this seemed like a great place to start. We&#8217;d like to let you know about new artworks that have been uploaded by artists that you follow, as well as new shows that have been added by galleries you follow, or that are exhibiting artists you follow. Since we have location data for our galleries and our users (accomplished thru an onboarding flow, or thru geo-locating their IP address), we also want to include new shows that are opening near you. Additionally, we have a recommendations engine that recommends artworks to users based on their preferences and activity on the site, and we&#8217;d like to show some of the latest and best of such recommendations.</p>

<h3>Initial Implementation Ideas</h3>

<p>My first thought was to have an observer (really just some <code>after_save</code> callbacks) that will wait for data to get into a state where a user can be validly notified, and in a background task write these notifications to interested users. Here&#8217;s how the base setup of our <code>Notification</code> model looked:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Notification</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Mongoid</span><span class="p">:</span><span class="ss">:Document</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Mongoid</span><span class="p">:</span><span class="ss">:Timestamps</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:user</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:notifiable</span><span class="p">,</span> <span class="ss">polymorphic</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="n">inverse_of</span><span class="p">:</span> <span class="ss">:notifications</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s a simple join of the user and the <code>notifiable</code> (the object/action that a user is being notified about).</p>

<p>Then, a specific notification (such as one for published artworks by artists you follow) can inherit from this and look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PublishedArtworkNotification</span> <span class="o">&lt;</span> <span class="no">Notification</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">notify!</span><span class="p">(</span><span class="n">artwork_id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">user_ids</span> <span class="o">=</span> <span class="no">FollowArtist</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">artist</span><span class="p">:</span> <span class="n">artwork</span><span class="o">.</span><span class="n">artist</span><span class="p">)</span><span class="o">.</span><span class="n">pluck</span><span class="p">(</span><span class="s2">&quot;user_id&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">user_ids</span><span class="o">.</span><span class="n">each_slice</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">uids</span><span class="o">|</span>
</span><span class='line'>      <span class="no">PublishedArtworkNotification</span><span class="o">.</span><span class="n">delay</span><span class="p">(</span><span class="ss">queue</span><span class="p">:</span> <span class="ss">:any</span><span class="p">,</span> <span class="ss">priority</span><span class="p">:</span> <span class="mi">6</span><span class="p">)</span><span class="o">.</span><span class="n">create_for_users</span><span class="p">(</span><span class="n">artwork_id</span><span class="p">,</span> <span class="n">uids</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">create_for_users</span><span class="p">(</span><span class="n">artwork</span><span class="p">,</span> <span class="n">uids</span><span class="p">)</span>
</span><span class='line'>    <span class="n">uids</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">uid</span><span class="o">|</span>
</span><span class='line'>      <span class="no">PublishedArtworkNotification</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="n">user_id</span><span class="p">:</span> <span class="n">uid</span><span class="p">,</span> <span class="n">notifiable_id</span><span class="p">:</span> <span class="n">artwork_id</span><span class="p">,</span> <span class="n">notifiable_type</span><span class="p">:</span> <span class="s1">&#39;Artwork&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, the <code>after_save</code> hook on an <code>Artwork</code> model is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">delay_notify</span>
</span><span class='line'>  <span class="no">PublishedArtworkNotification</span><span class="o">.</span><span class="n">delay</span><span class="p">(</span><span class="ss">queue</span><span class="p">:</span> <span class="ss">:any</span><span class="p">)</span><span class="o">.</span><span class="n">notify!</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">id</span><span class="p">)</span> <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">published_changed?</span> <span class="o">&amp;&amp;</span> <span class="nb">self</span><span class="o">.</span><span class="n">published</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, when an artwork is published, we run <code>notify!</code> in the background for the respective notification. That method will pull all interested users (via following the artist), and then spawn off more background processes to write the notifications in batches of 100. We batched these writes to avoid any one background process taking too long (an artist such as <a href="https://artsy.net/artist/andy-warhol">Andy Warhol</a> has around twelve thousand followers currently), and also ran them at a lower priority to avoid blocking other jobs in our queue.</p>

<p>The other types of notifications were all implemented similarly (via an observer on the model, and a specific <code>Notification</code> class inheriting from the base class). We also added some other logic into the base <code>Notification</code> class such as some uniqueness constraints, as well as an ability to mark notifications as &#8216;sent&#8217; or &#8216;invalid&#8217;. However, we ran into serious performance/scaling issues fairly quickly, and had to re-implement this scheme.</p>

<h3>Performance Bottlenecks</h3>

<p>All of these records were being written to one collection in <a href="https://www.mongodb.org/">MongoDB</a>, and the size of this collection grew quite rapidly. It&#8217;s size almost immediately dwarfed the size of any of our other collections, and the number of records quickly reached into the tens of millions. This led to problems: writing new notifications started to crawl to a standstill. We had several indices on this collection to aid in querying, and these made the insertion of new notifications very non-performant, and also started to affect overall database performance. Querying against this collection degraded quickly and started to similarly affect database performance. Archiving old records also proved next to impossible. We couldn&#8217;t simply drop the entire collection, but had to prune records. This similarly was totally non-performant and was adversely affecting database and site performance. We needed to come up with a new implementation for <code>Notification</code>, and addressing these issues was essential.</p>

<h3>Resolving Performance Bottlenecks</h3>

<p>So, we decided on a scheme where each day would result in a new <code>Notifications</code> collection (name keyed on the date), named <code>notifications_20140101</code>, <code>notifications_20140102</code>, etc. Each of these collections would have an <code>_id</code> field that corresponds to a user_id, and an <code>events</code> array (or &#8216;stack&#8217; if you will) that records the id&#8217;s of notified objects, as well as the type of notification. An example of a record in that collection is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span><span class="nt">&quot;_id&quot;</span><span class="err">=&gt;</span><span class="s2">&quot;5106b619f56337db300001f8&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="nt">&quot;events&quot;</span><span class="err">=&gt;</span><span class="p">[{</span><span class="nt">&quot;t&quot;</span><span class="err">=&gt;</span><span class="s2">&quot;NearbyShow&quot;</span><span class="p">,</span> <span class="nt">&quot;o&quot;</span><span class="err">=&gt;</span><span class="s2">&quot;533998b1c9dc24c371000041&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nt">&quot;t&quot;</span><span class="err">=&gt;</span><span class="s2">&quot;NearbyShow&quot;</span><span class="p">,</span> <span class="nt">&quot;o&quot;</span><span class="err">=&gt;</span><span class="s2">&quot;5345774cc9dc246d580003d0&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nt">&quot;t&quot;</span><span class="err">=&gt;</span><span class="s2">&quot;NearbyShow&quot;</span><span class="p">,</span> <span class="nt">&quot;o&quot;</span><span class="err">=&gt;</span><span class="s2">&quot;5335af4fa09a67145300028c&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nt">&quot;t&quot;</span><span class="err">=&gt;</span><span class="s2">&quot;NearbyShow&quot;</span><span class="p">,</span> <span class="nt">&quot;o&quot;</span><span class="err">=&gt;</span><span class="s2">&quot;533f1174a09a67298900007b&quot;</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="nt">&quot;t&quot;</span><span class="err">=&gt;</span><span class="s2">&quot;ArtworkPublished&quot;</span><span class="p">,</span> <span class="nt">&quot;o&quot;</span><span class="err">=&gt;</span><span class="s2">&quot;5334647b139b2165160000d8&quot;</span><span class="p">}]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, here we see all of my notifications for April 22, 2014. On that day, I was notified about 4 shows opening near my location, and one artwork added by an artist I follow. Incidentally, that artwork was a piece by <a href="https://artsy.net/artist/rob-wynne">Rob Wynne</a> entitled <a href="https://artsy.net/artwork/rob-wynne-youre-dreaming">You&#8217;re Dreaming</a>. The show notifications were for NYC-area shows opening at <a href="https://artsy.net/klein-sun-gallery">Klein Sun Gallery</a>, <a href="https://artsy.net/garis-and-hahn">Garis &amp; Hahn</a>, <a href="https://artsy.net/miyako-yoshinaga-gallery">Miyako Yoshinaga Gallery</a> and <a href="https://artsy.net/dodgegallery">DODGEgallery</a>.</p>

<p>A couple of nice things about this implementation is it limits the size of a collection: any one day&#8217;s collection will scale directly with the number of users, which seems reasonable. Our earlier implementation scaled with the product of the number of users and amount of content on Artsy, which is clearly problematic. Also, archiving old notifications is as simple as dropping a particular day&#8217;s collection, which is very performant. However, querying and assembling these notifications is a bit trickier than in the naive implementation, as well as marking which events have already been sent to a user, so as to avoid duplicating any content in between mailings.</p>

<p>Let&#8217;s see how we rewrite the notification generation in this scheme:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">NotificationService</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">notify_many!</span><span class="p">(</span><span class="n">user_ids</span><span class="p">,</span> <span class="nb">object_id</span><span class="p">,</span> <span class="n">type</span><span class="p">)</span>
</span><span class='line'>    <span class="n">events</span> <span class="o">=</span> <span class="n">events_from</span><span class="p">(</span><span class="nb">object_id</span><span class="p">,</span> <span class="n">type</span><span class="p">)</span>
</span><span class='line'>    <span class="n">user_ids</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">user_id</span><span class="o">|</span>
</span><span class='line'>      <span class="n">notify_with_events</span><span class="p">(</span><span class="n">user_id</span><span class="p">,</span> <span class="n">events</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">notify_with_events</span><span class="p">(</span><span class="n">user_id</span><span class="p">,</span> <span class="n">events</span><span class="p">)</span>
</span><span class='line'>    <span class="n">collection</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="ss">_id</span><span class="p">:</span> <span class="n">user_id</span><span class="p">)</span><span class="o">.</span><span class="n">upsert</span><span class="p">(</span><span class="s1">&#39;$push&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">events</span><span class="p">:</span> <span class="p">{</span> <span class="s1">&#39;$each&#39;</span> <span class="o">=&gt;</span> <span class="n">events</span> <span class="p">}</span> <span class="p">})</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">events_from</span><span class="p">(</span><span class="n">object_ids</span><span class="p">,</span> <span class="n">type</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">Array</span><span class="p">(</span><span class="n">object_ids</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="nb">object_id</span><span class="o">|</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;t&#39;</span> <span class="o">=&gt;</span> <span class="n">type</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;o&#39;</span> <span class="o">=&gt;</span> <span class="nb">object_id</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># collection storing notifications for the given day</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">collection</span><span class="p">(</span><span class="n">date</span> <span class="o">=</span> <span class="no">Date</span><span class="o">.</span><span class="n">today</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Mongoid</span><span class="o">.</span><span class="n">default_session</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="ss">safe</span><span class="p">:</span> <span class="kp">false</span><span class="p">)</span><span class="o">[</span><span class="n">collection_name</span><span class="p">(</span><span class="n">date</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">collection_name</span><span class="p">(</span><span class="n">date</span><span class="p">)</span>
</span><span class='line'>    <span class="s2">&quot;notifications_</span><span class="si">#{</span><span class="n">date</span><span class="o">.</span><span class="n">to_s</span><span class="p">(</span><span class="ss">:number</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&#8217;s how the <code>after_save</code> callback looks now:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">notify_published</span>
</span><span class='line'>  <span class="no">NotificationService</span><span class="o">.</span><span class="n">notify_many!</span><span class="p">(</span><span class="n">user_ids</span><span class="p">,</span> <span class="nb">self</span><span class="p">,</span> <span class="s1">&#39;ArtworkPublished&#39;</span><span class="p">)</span> <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">published_changed?</span> <span class="o">&amp;&amp;</span> <span class="nb">self</span><span class="o">.</span><span class="n">published</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s take a look at what&#8217;s going on here. When an artwork is published, we call <code>notify_many!</code> in the <code>NotificationService</code> module. That will determine the correct collection (keyed by the date) using the <code>collection</code> and <code>collection_name</code> helpers. We build our events stack with the <code>events_from</code> helper, and then do an <code>upsert</code> with a <code>$push</code> to either insert or update that user&#8217;s events for that day. Due to the fast performance of this scheme, we also no longer have to batch notification creation. As a sample benchmark, writing this type of notification to our <a href="https://artsy.net/artist/andy-warhol">Warhol</a> followers takes under 15 seconds.</p>

<p>Ok, so we seem to have solved some of our issues: namely writing and archiving notifications is performant, and we understand the behavior of these collections as the number of users and content on the site grows. Now let&#8217;s look at how we can query against this scheme in an efficient manner, and also how we can mark events as &#8216;seen&#8217; to avoid emailing out duplicates.</p>

<h3>Marking Notifications as Flushed and Retrieving Notifications</h3>

<p>We decided to push a <code>flushed</code> event onto the user&#8217;s stack after we send out notifications, and analogously, when we are querying a user&#8217;s notifications, we want to throw away notifications that occur before a <code>flushed</code> event. Here&#8217;s that method, in our <code>NotificationService</code> module:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Mark all events until this point &quot;seen.&quot; Pushes a {flushed: &lt;id&gt;}</span>
</span><span class='line'><span class="c1"># hash on to events array.</span>
</span><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">flush!</span><span class="p">(</span><span class="n">user_id</span><span class="p">,</span> <span class="n">since</span> <span class="o">=</span> <span class="no">Date</span><span class="o">.</span><span class="n">today</span> <span class="o">-</span> <span class="mi">7</span><span class="o">.</span><span class="n">days</span><span class="p">)</span>
</span><span class='line'>  <span class="n">flushed</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;flushed&#39;</span> <span class="o">=&gt;</span> <span class="ss">Moped</span><span class="p">:</span><span class="ss">:BSON</span><span class="o">::</span><span class="no">ObjectId</span><span class="o">.</span><span class="n">new</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">collections_since</span><span class="p">(</span><span class="n">since</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">coll</span><span class="o">|</span>
</span><span class='line'>    <span class="n">coll</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="ss">_id</span><span class="p">:</span> <span class="n">user_id</span><span class="p">)</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="s1">&#39;$push&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">events</span><span class="p">:</span> <span class="n">flushed</span> <span class="p">})</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">flushed</span>  <span class="c1"># return &quot;id&quot; of flushed marker, in case useful later</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kp">private</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">collections_since</span><span class="p">(</span><span class="n">date</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="n">date</span><span class="o">.</span><span class="n">.</span><span class="no">Date</span><span class="o">.</span><span class="n">today</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">d</span><span class="o">|</span> <span class="n">collection</span><span class="p">(</span><span class="n">d</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty simple. We push the appropriate event onto every collection that was under consideration via the <code>collections_since</code> helper. When we send out a personalized email we accumulate the last 7 day&#8217;s worth of activity for you, and so after we generate/send a mail for a user, we can simply say <code>NotificationService.flush!(user)</code>. Here&#8217;s how that day&#8217;s notifications for me looks after the <code>flushed</code> event:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'>  <span class="p">{</span><span class="nt">&quot;_id&quot;</span><span class="err">=&gt;</span><span class="s2">&quot;5106b619f56337db300001f8&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="nt">&quot;events&quot;</span><span class="err">=&gt;</span><span class="p">[{</span><span class="nt">&quot;t&quot;</span><span class="err">=&gt;</span><span class="s2">&quot;NearbyShow&quot;</span><span class="p">,</span> <span class="nt">&quot;o&quot;</span><span class="err">=&gt;</span><span class="s2">&quot;5338504e139b21f2a9000362&quot;</span><span class="p">},</span>
</span><span class='line'>              <span class="p">{</span><span class="nt">&quot;t&quot;</span><span class="err">=&gt;</span><span class="s2">&quot;FollowedArtistShow&quot;</span><span class="p">,</span> <span class="nt">&quot;o&quot;</span><span class="err">=&gt;</span><span class="s2">&quot;533ddba3a09a6764f60006b6&quot;</span><span class="p">},</span> <span class="p">{</span><span class="nt">&quot;t&quot;</span><span class="err">=&gt;</span><span class="s2">&quot;NearbyShow&quot;</span><span class="p">,</span> <span class="nt">&quot;o&quot;</span><span class="err">=&gt;</span><span class="s2">&quot;533ddba3a09a6764f60006b6&quot;</span><span class="p">},</span>
</span><span class='line'>              <span class="p">{</span><span class="nt">&quot;flushed&quot;</span><span class="err">=&gt;</span><span class="s2">&quot;5352b346b504f5f3690002fe&quot;</span><span class="p">}]</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the last piece of the puzzle, let&#8217;s look at how we query against this scheme and compile together all notifications that are applicable for a given user:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">NotificationService</span>
</span><span class='line'>  <span class="no">NOTIFICATION_TYPES</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;FollowedArtistShow&#39;</span> <span class="o">=&gt;</span> <span class="no">PartnerShow</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;FollowedPartnerShow&#39;</span> <span class="o">=&gt;</span> <span class="no">PartnerShow</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;NearbyShow&#39;</span> <span class="o">=&gt;</span> <span class="no">PartnerShow</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;ArtworkPublished&#39;</span> <span class="o">=&gt;</span> <span class="no">Artwork</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;ArtworkSuggested&#39;</span> <span class="o">=&gt;</span> <span class="no">Artwork</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Notification</span> <span class="o">&lt;</span> <span class="no">Struct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:type</span><span class="p">,</span> <span class="ss">:object_id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">object</span>
</span><span class='line'>      <span class="vi">@object</span> <span class="o">||=</span> <span class="no">NOTIFICATION_TYPES</span><span class="o">[</span><span class="n">type</span><span class="o">].</span><span class="n">find</span><span class="p">(</span><span class="nb">object_id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">applicable?</span>
</span><span class='line'>      <span class="n">object</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:notifiable?</span><span class="p">)</span> <span class="o">||</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Return applicable notifications for user since given date.</span>
</span><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">get</span><span class="p">(</span><span class="n">user_id</span><span class="p">,</span> <span class="n">since</span> <span class="o">=</span> <span class="no">Date</span><span class="o">.</span><span class="n">today</span> <span class="o">-</span> <span class="mi">7</span><span class="o">.</span><span class="n">days</span><span class="p">)</span>
</span><span class='line'>  <span class="n">collections_since</span><span class="p">(</span><span class="n">since</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">coll</span><span class="o">|</span> <span class="n">coll</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="ss">_id</span><span class="p">:</span> <span class="n">user_id</span><span class="p">)</span><span class="o">.</span><span class="n">one</span> <span class="p">}</span><span class="o">.</span><span class="n">compact</span>
</span><span class='line'>    <span class="o">.</span><span class="n">flat_map</span> <span class="p">{</span> <span class="o">|</span><span class="n">doc</span><span class="o">|</span> <span class="n">doc</span><span class="o">[</span><span class="s1">&#39;events&#39;</span><span class="o">].</span><span class="n">slice_before</span> <span class="p">{</span> <span class="o">|</span><span class="n">ev</span><span class="o">|</span> <span class="n">ev</span><span class="o">[</span><span class="s1">&#39;flushed&#39;</span><span class="o">]</span> <span class="p">}</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">last</span> <span class="p">}</span>
</span><span class='line'>    <span class="o">.</span><span class="n">reject</span> <span class="p">{</span> <span class="o">|</span><span class="n">ev</span><span class="o">|</span> <span class="n">ev</span><span class="o">[</span><span class="s1">&#39;flushed&#39;</span><span class="o">]</span> <span class="p">}</span><span class="o">.</span><span class="n">uniq</span>
</span><span class='line'>    <span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">ev</span><span class="o">|</span> <span class="no">Notification</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">ev</span><span class="o">[</span><span class="s1">&#39;t&#39;</span><span class="o">]</span><span class="p">,</span> <span class="n">ev</span><span class="o">[</span><span class="s1">&#39;o&#39;</span><span class="o">]</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:applicable?</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We introduce a lite-weight <code>Notification</code> class that will load the object, as well as perform an additional check. We use the previously introduced <code>collections_since</code> helper to retrieve all the notification collections under consideration. We query each and build up an array of all events from a user&#8217;s stack. We remove events that occurred prior to a <code>flushed</code> event in a given collection and the <code>flushed</code> events themselves. Then we actually load all the objects and return the ones that are still <code>applicable?</code>. That final <code>applicable?</code> check is to allow us to filter out content at run-time that is no longer valid. For example, if an artwork is published and the correct event is written out to users, but before the user can be notified the artwork is unpublished, this can serve as a run-time check to not include that work. <code>def notifiable?</code> can thus be implemented in the <code>Artwork</code> model like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">notifiable?</span>
</span><span class='line'>  <span class="n">published?</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And&#8230;that&#8217;s basically it! Throughout the week as partners are uploading their shows/fair booths/artworks, these records are being opportunistically written to that day&#8217;s notification collection, in a performant and scalable fashion. Then when we want to send you a personalized email, we pull all your appropriate notifications via the <code>get</code> routine in our <code>NotificationService</code>, and primarily using the technique described in <a href="http://artsy.github.io/blog/2014/03/18/presenters-and-memoization-moving-logic-out-of-templates/">Presenters and Memoization</a> we make sure we cache/memoize all such data. Using the tips in <a href="http://artsy.github.io/blog/2014/03/17/ruby-helper-to-group-artworks-into-a-pinterest-style-layout-for-email/">Pinterest-style Layouts</a> and <a href="http://artsy.github.io/blog/2014/03/17/some-tips-for-email-layout-and-responsiveness/">Email Layouts and Responsiveness</a> we can render this content and support various devices/email clients. We parallelize and batch the generation/sending of our e-mails as well. This whole system, from notification generation to actually emailing users, is running successfully and smoothly in production.</p>

<h3>Next Steps</h3>

<p>I think this type of infrastructure can easily be adapted to serve as a feed on a front-end or other client app. An API to serve up these notifications (AKA feed items) can be built and different feed items can then be rendered or aggregated at load-time. Simple client-side polling can even be set up to alert a user if something has happened that interests them <em>while</em> they&#8217;re browsing! I think push notifications and other messaging can be handled by this system as well.</p>

<p>I&#8217;d love to hear any feedback and thoughts, and hopefully you&#8217;ve found this post informative and interesting. Please leave any feedback in the comments and <a href="https://github.com/artsy">follow us on Github</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building an English Auction with MongoDB]]></title>
    <link href="http://artsy.github.io/blog/2014/04/17/building-an-english-auction-with-mongodb/"/>
    <updated>2014-04-17T12:21:00-04:00</updated>
    <id>http://artsy.github.io/blog/2014/04/17/building-an-english-auction-with-mongodb</id>
    <content type="html"><![CDATA[<p>Artsy ran several successful auctions over the past few months. The first, <a href="https://artsy.net/feature/two-x-two">TWO x TWO</a>, raised hundreds of thousands of dollars for amfAR (the AIDS Research foundation), and the Dallas Museum of Art. It was followed by <a href="https://artsy.net/feature/ici-benefit-auction">Independent Curators International</a>, at which Artsy launched on-site auction projection screens, which displayed competing bids coming in online from places around the world, like Oslo and Santa Monica, in realtime. Users could place bids on the website, via the iPhone app or with one of the Artsy representatives in the room carrying an iPad.  All the auction lots sold, and Artsy helped ICI to raise 50% more than its target revenue goal. Other, recent Artsy auctions include <a href="https://artsy.net/feature/public-art-fund-2014-spring-benefit">Public Art Fund</a> and the <a href="https://artsy.net/feature/brooklyn-artists-ball">Brooklyn Artists Ball</a>, benefitting the Brooklyn Museum.</p>

<p><img src="http://artsy.github.io/images/2014-04-17-implementing-bidding-in-an-english-auction-with-mongodb/ici-live-auction.jpg" alt="ICI Auction: Live" /></p>

<p>The domain of auctions is a fascinating one, and includes everything from buying items on eBay to trading livestock and selling investment products on the stock exchange. For those interested in the large spectrum of auctions I highly recommend <a href="http://www.sci.brooklyn.cuny.edu/~parsons/projects/mech-design/publications/bluffers-final.pdf">Auctions and bidding: A guide for computer
scientists</a> by Simon Parsons (CUNY), Juan A. Rodriguez-Aguilar (CSIC) and Mark Klein (MIT).</p>

<p>At Artsy we implemented a classic English auction with, so called, &#8220;book bids&#8221;. I spent a fair amount of time visiting engineering teams that have built internet auctions, most of which were transactional systems where taking a position on an item involved starting a transaction, running an auction round and committing the changes. In contrast, we chose to deliver a simpler, eventually consistent system on top of MongoDB, in which all data is immutable and where some level of serialization occurs within a single background process.</p>

<p>In this post we&#8217;ll go over some data modeling and examine the auction engine implementation details.</p>

<!-- more -->


<h3>Data Modeling</h3>

<p>In the Artsy platform, an <em>Auction</em> is an specialization of a more general concept of a <em>Sale</em>. A sale typically has an opening and a closing date, during which bidding or purchases can occur. We create a relationship between an artwork and a sale, which, in the case of an auction, includes the opening bid amount. We store all money in cents, and assume the currency to be USD, making it easy to extend the system for other currencies in the future.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SaleArtwork</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Mongoid</span><span class="p">:</span><span class="ss">:Document</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:opening_bid_cents</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="nb">Integer</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:artwork</span><span class="p">,</span> <span class="n">inverse_of</span><span class="p">:</span> <span class="kp">nil</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:sale</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:highest_bid</span><span class="p">,</span> <span class="n">class_name</span><span class="p">:</span> <span class="s2">&quot;Bid&quot;</span><span class="p">,</span> <span class="n">inverse_of</span><span class="p">:</span> <span class="kp">nil</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Minimum next acceptable bid amount, in cents.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">minimum_next_bid_cents</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">opening_bid_cents</span> <span class="k">if</span> <span class="n">highest_bid</span><span class="o">.</span><span class="n">nil?</span> <span class="o">&amp;&amp;</span> <span class="n">opening_bid_cents</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>    <span class="c1"># calculate using a bid incrementing strategy ...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>A user registers to bid and creates a <em>Bidder</em> record.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Bidder</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Mongoid</span><span class="p">:</span><span class="ss">:Document</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:user</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:sale</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:positions</span><span class="p">,</span> <span class="n">class_name</span><span class="p">:</span> <span class="s1">&#39;BidderPosition&#39;</span><span class="p">,</span> <span class="n">inverse_of</span><span class="p">:</span> <span class="ss">:bidder</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This doesn&#8217;t just mimic the real world where bidding typically requires registration - the bidder record doesn&#8217;t belong to the user and contains essential data to identify an individual that is placing a bid. It also solves a very peculiar problem where a user decides to delete their account mid-auction. Finally, a bidder could eventually delegate bidding to an agent through this model&#8217;s permissions.</p>

<p>A bidder doesn&#8217;t actually place any bids, but create a <em>Bidder Position</em>, which indicates the highest amount they are willing to pay for a given artwork.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">BidderPosition</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Mongoid</span><span class="p">:</span><span class="ss">:Document</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:active</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="no">Boolean</span><span class="p">,</span> <span class="ss">default</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:max_bid_amount_cents</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="nb">Integer</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:bidder</span><span class="p">,</span> <span class="n">class_name</span><span class="p">:</span> <span class="s1">&#39;Bidder&#39;</span><span class="p">,</span> <span class="n">inverse_of</span><span class="p">:</span> <span class="ss">:positions</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:sale_artwork</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:bids</span><span class="p">,</span> <span class="n">inverse_of</span><span class="p">:</span> <span class="ss">:position</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:active</span><span class="p">,</span> <span class="n">where</span><span class="p">(</span><span class="ss">active</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span><span class="o">.</span><span class="n">asc</span><span class="p">(</span><span class="ss">:max_bid_amount_cents</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is called a &#8220;book bid&#8221; - before technology took over the auctions world buyers delegated an agent to bid on their behalf after giving them a maximum amount they were willing to part with. Bidder positions belong to a bidder and to the artwork-to-sale relationship. They cannot be changed - if a user wants to increase his maximum bid, he simply creates a new bidder position.</p>

<h3>Bidding Round</h3>

<p>Every time a bidder position is created, a <em>Bidding Round</em> is queued for the item being bid on. We can parallelize execution of these by artwork, however all bidding rounds for the same artwork are serialized.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">EnglishAuction</span>
</span><span class='line'>  <span class="c1"># Run multiple rounds of bidding for the given lot, to rest. Return number of bids generated.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">run!</span><span class="p">(</span><span class="n">sale_artwork</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span> <span class="k">unless</span> <span class="n">sale_artwork</span><span class="o">.</span><span class="n">sale</span> <span class="o">&amp;&amp;</span> <span class="n">sale_artwork</span><span class="o">.</span><span class="n">sale</span><span class="o">.</span><span class="n">biddable?</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">round</span> <span class="o">=</span> <span class="ss">EnglishAuction</span><span class="p">:</span><span class="ss">:Round</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">sale_artwork</span><span class="p">)</span>
</span><span class='line'>    <span class="n">round</span><span class="o">.</span><span class="n">run!</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">round</span><span class="o">.</span><span class="n">bids_generated</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>A bidding round iterates over all active bidder positions in ascending order by dollar value, outbids any bidders below the max bid, and places new bids, as necessary. The entire round algorithm is below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># A bidding round for an English auction.</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Round</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:bids_generated</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># @param sale_artwork A relationship between an artwork and a sale.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">sale_artwork</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@sale_artwork</span> <span class="o">=</span> <span class="n">sale_artwork</span>
</span><span class='line'>    <span class="vi">@bids_generated</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Run multiple rounds of bidding, to rest.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">run!</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">bids</span> <span class="o">=</span> <span class="n">process_more_bids!</span><span class="p">)</span><span class="o">.</span><span class="n">any?</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@bids_generated</span> <span class="o">+=</span> <span class="n">bids</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Run one round of bidding. Return bids.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">process_more_bids!</span>
</span><span class='line'>    <span class="vi">@sale_artwork</span><span class="o">.</span><span class="n">bidder_positions</span><span class="o">.</span><span class="n">active</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">bidder_position</span><span class="o">|</span>
</span><span class='line'>      <span class="n">process_bidder_position!</span><span class="p">(</span><span class="n">bidder_position</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span><span class="o">.</span><span class="n">compact</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Process a single bid position.</span>
</span><span class='line'>  <span class="c1"># @returns Generated bid, if any.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">process_bidder_position!</span><span class="p">(</span><span class="n">bidder_position</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># ignore if current position is highest</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">nil</span> <span class="k">if</span> <span class="n">bidder_position</span> <span class="o">==</span> <span class="vi">@sale_artwork</span><span class="o">.</span><span class="n">highest_bid</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:position</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># ignore if bidder is already highest</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">nil</span> <span class="k">if</span> <span class="n">bidder_position</span><span class="o">.</span><span class="n">bidder</span> <span class="o">==</span> <span class="vi">@sale_artwork</span><span class="o">.</span><span class="n">highest_bid</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:position</span><span class="p">)</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:bidder</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># close if below opening bid</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">bidder_position</span><span class="o">.</span><span class="n">max_bid_amount_cents</span> <span class="o">&lt;</span> <span class="p">(</span><span class="vi">@sale_artwork</span><span class="o">.</span><span class="n">opening_bid_cents</span> <span class="o">||</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">bidder_position</span><span class="o">.</span><span class="n">deactivate!</span> <span class="s2">&quot;Bid must be greater than the minimum bid of </span><span class="si">#{</span><span class="vi">@sale_artwork</span><span class="o">.</span><span class="n">opening_bid_cents</span><span class="si">}</span><span class="s2">.&quot;</span>
</span><span class='line'>      <span class="k">return</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">amount_cents</span> <span class="o">=</span> <span class="vi">@sale_artwork</span><span class="o">.</span><span class="n">minimum_next_bid_cents</span> <span class="c1"># opening bid or an increment thereafter</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">bidder_position</span><span class="o">.</span><span class="n">max_bid_amount_cents</span> <span class="o">&lt;</span> <span class="n">amount_cents</span>
</span><span class='line'>      <span class="n">highest_bid_amount</span> <span class="o">=</span> <span class="vi">@sale_artwork</span><span class="o">.</span><span class="n">highest_bid</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:amount_cents</span><span class="p">)</span> <span class="o">||</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># if max is between current and increment (or if it&#39;s at current, but earlier), bid max anyway</span>
</span><span class='line'>      <span class="c1"># this means that a bidder who placed an identical max bid earlier becomes the highest bidder</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">bidder_position</span><span class="o">.</span><span class="n">max_bid_amount_cents</span> <span class="o">&gt;</span> <span class="n">highest_bid_amount</span> <span class="o">||</span>
</span><span class='line'>        <span class="p">(</span><span class="n">bidder_position</span><span class="o">.</span><span class="n">max_bid_amount_cents</span> <span class="o">==</span> <span class="n">highest_bid_amount</span> <span class="o">&amp;&amp;</span> <span class="n">bidder_position</span><span class="o">.</span><span class="n">id</span> <span class="o">&lt;</span> <span class="vi">@sale_artwork</span><span class="o">.</span><span class="n">highest_bid</span><span class="o">.</span><span class="n">position</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>        <span class="n">amount_cents</span> <span class="o">=</span> <span class="n">bidder_position</span><span class="o">.</span><span class="n">max_bid_amount_cents</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="c1"># outbid, next bid must be at least amount_cents</span>
</span><span class='line'>        <span class="n">bidder_position</span><span class="o">.</span><span class="n">update_attributes!</span> <span class="ss">active</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>        <span class="k">return</span> <span class="kp">nil</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># place a bid</span>
</span><span class='line'>    <span class="n">bidder_position</span><span class="o">.</span><span class="n">bids</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="n">attrs</span><span class="p">)</span><span class="o">.</span><span class="n">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">bid</span><span class="o">|</span>
</span><span class='line'>      <span class="vi">@sale_artwork</span><span class="o">.</span><span class="n">update_attributes!</span> <span class="n">highest_bid</span><span class="p">:</span> <span class="n">bid</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>One of the interesting aspects of this system is what happens when two users create two identical bidder positions - the earlier one wins and the later one is outbid. In a transactional system we could produce an error message to the second bidder before the position is even created.</p>

<h3>Bidder Notifications</h3>

<p>Notifying upon being &#8220;outbid&#8221; is straightforward, because a position only enters that state once, but notifying bidders of when they are the current high bidder or when their bid has been increased is trickier. We don&#8217;t want to generate notifications every time a bid is made (i.e., it&#8217;s the current high). Rather, we want to allow the round to reach a stable state at which there&#8217;s only a single active position and then notify the current high and outbid bidders. This happens after each <code>round.run!</code>.</p>

<h3>Beyond Bidding</h3>

<p>Aside of the bidding implementation we&#8217;ve built a whole software ecosystem around auctions. We developed a backend system to manage these. We put up projection screens at the event that list works being auctioned and flash every time a bid is placed. We register users&#8217; credit cards and collect their money.</p>

<p>The software part, however, is definitely dwarfed by the amount of logistics and people involved in making one of those auctions a success. We&#8217;re only trying to make that a bit more efficient. We&#8217;ll see you at the upcoming BAM Art Auction, SFMOMA Modern Ball or the Whitney Museum Art Party!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring Infrastructure]]></title>
    <link href="http://artsy.github.io/blog/2014/04/02/refactoring-infrastructure/"/>
    <updated>2014-04-02T10:32:00-04:00</updated>
    <id>http://artsy.github.io/blog/2014/04/02/refactoring-infrastructure</id>
    <content type="html"><![CDATA[<p><a href="http://martinfowler.com/books/refactoring.html">Refactoring</a> usually describes chages to <em>code</em>. Specifically, small changes that bring a codebase closer to the desired state. By making these changes incrementally and without modifying the end-to-end behavior, we avoid risk and the intermediate broken states that usually plague large-scale changes. But refactoring need not be limited to code. It&#8217;s also an effective way to make infrastructure improvements.</p>

<p>Take the most common&#8211;and simplest&#8211;example: database schema changes. Environments that demand constant uptime have long had to chunk schema changes into steps that allow for a graceful transition. In the simple case of replacing a column, this might look like:</p>

<ol>
<li>Add the new column</li>
<li>Redirect code references there from the old column</li>
<li>Migrate data as necessary, and finally</li>
<li>Remove the old column</li>
</ol>


<p>The same sequencing applies to making larger infrastructure changes gracefully. Some recent examples from our own experience:</p>

<!-- more -->


<h2>Splitting databases</h2>

<p>When MongoDB&#8217;s <a href="http://docs.mongodb.org/manual/faq/concurrency/">database-level write-lock</a> started to impact our API performance, we explored switching certain batch insertions to a separate database. We made the transition seamless by first adding a version number to the batch logic. Existing batches would default to &#8220;v1&#8221; treatment and be read from the main database, while new batches would get &#8220;v2&#8221; treatment and be inserted into (and then read from) a secondary database. (See <a href="https://gist.github.com/joeyAghion/9955727">this gist</a> for a more concrete demonstration.) After a few cycles, legacy collections had all been replaced by more recent batches in the new database and could be removed.</p>

<h2>Extracting a web front-end from a monolithic app</h2>

<p>The <a href="https://artsy.net">artsy.net</a> site was recently extracted from our main Rails application into a dedicated Node.js app and a true client of our API. We rolled it out almost page-by-page; we simply configured <a href="http://wiki.nginx.org/Main">Nginx</a> to proxy requests for a whitelist of paths to the new site. That allowed us to start with the simplest of pages and incorporate new ones as they were developed. Nginx supports <a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass">sophisticated proxying rules</a>, but our example can be as simple as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>location ^~ /about|press {
</span><span class='line'>  proxy_pass http://next.artsy.net;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Once the new app was feature-complete, we removed the proxying layer and updated DNS so it would handle all requests.</p>

<h2>New hosting environment</h2>

<p>When we <a href="http://artsy.github.io/blog/2013/08/27/introduction-to-aws-opsworks/">switched hosting providers</a> for our main application, it required changes to <em>many</em> related tools and services (for logs, deploys, background queues, etc.). To mitigate risk, we set up a &#8220;double-deploy&#8221; to the legacy and new environments as soon as the basic elements were in place. The environments ran the same code and shared a data store. First, we targeted the new environment from only a few internal apps. As we surfaced and fixed bugs, we directed more client applications away from the old, eventually winding it down altogether. The process was spread over months, but since each individual change was small and low-risk, we were confident and could adjust course as necessary.</p>

<h2>Full application rewrite</h2>

<p>Occasionally&#8211;but rarely&#8211;it&#8217;s awkward to partially roll out a new system. Maybe it&#8217;s a significant enough re-imagining that it won&#8217;t play nicely with the legacy application (e.g., a clashing UI that&#8217;s difficult to back-port). It&#8217;s <em>still</em> possible to take a refactoring approach. When the new application is minimally viable, new customers can be directed to it. As more customers join and the new application reaches feature parity (and beyond), the user base naturally shifts toward the new and away from the old. Legacy customers can be transitioned when it&#8217;s more convenient.</p>

<p>Trying a refactoring approach over the course of these large infrastructure changes has convinced me of the following lessons:</p>

<p><strong>1. There&#8217;s <em>always</em> a more incremental approach.</strong> Repeat after me.</p>

<p><strong>2. Your culture will benefit.</strong> Just as the tools and vocabulary of code refactoring yield benefits to development workflow, there are cultural benefits to viewing infrastructure as more dynamic and flexible. We&#8217;re able to make more aggressive changes, and with greater confidence in the result. Nothing is sacred, &#8220;fixed,&#8221; or can&#8217;t be undone.</p>

<p><strong>3. Ship sooner.</strong> By exercising the ability to roll out infrastructure changes incrementally, bugs and mistaken assumptions are surfaced earlier.</p>

<p><strong>4. Transitions can be ugly.</strong> There will likely be some embarrassing intermediate stages. Embrace it. As a rule of thumb, it&#8217;s OK to compromise the old system&#8217;s integrity (i.e., <em>hack</em>) to ease the transition as you work toward the new ideal.</p>

<p>The tools for managing infrastructure have been improving steadily (see <a href="http://www.getchef.com/chef/">Chef</a>, <a href="http://www.ansible.com/home">Ansible</a>, <a href="https://www.docker.io/">Docker</a>), making infrastructure changes more lightweight, testable, and repeatable&#8211;closer to code. Refactoring infrastructure is the natural extension of this. From <a href="https://twitter.com/KentBeck">Kent Beck</a>:</p>

<blockquote class="twitter-tweet" lang="en"><p>for each desired change, make the change easy (warning: this may be hard), then make the easy change</p>&mdash; Kent Beck (@KentBeck) <a href="https://twitter.com/KentBeck/statuses/250733358307500032">September 25, 2012</a></blockquote>


<script async src="http://artsy.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Presenters and Memoization: Moving Logic out of Templates]]></title>
    <link href="http://artsy.github.io/blog/2014/03/18/presenters-and-memoization-moving-logic-out-of-templates/"/>
    <updated>2014-03-18T17:27:00-04:00</updated>
    <id>http://artsy.github.io/blog/2014/03/18/presenters-and-memoization-moving-logic-out-of-templates</id>
    <content type="html"><![CDATA[<p>When dealing with rendering data for an email, one frequently has to make many database calls to assemble the required data. This can be slow, and depending on how you structure the code that is assembling the data vs rendering the data in a template, it&#8217;s very easy to be making repeated calls, which can significantly slow down your process. Additionally, whether you are using <a href="http://haml.info/">Haml</a>, <a href="http://mustache.github.io/">Mustache</a>, <a href="http://jade-lang.com/">Jade</a>, or any other templating language, embedding too much logic in the template can making things hard to maintain (especially if some logic lives in the template and some elsewhere in your domain code). Of course some logic in the template (a conditional: should I render this section?, or loops: render this hash of data) is necessary, but I like to keep as much out of there as possible. It&#8217;s easier to optimize, debug and maintain that logic elsewhere, and also writing complex logic in <a href="https://www.ruby-lang.org">Ruby</a> is much more fun than in a templating language!</p>

<p>In this article I&#8217;ll present what I&#8217;ve been doing to keep my templates relatively logic-free, and how I make sure I don&#8217;t repeat any heavy database calls in assembling my data.</p>

<!-- more -->


<h2>The Setup - Presenters and Memoization</h2>

<p>First, I&#8217;d like to introduce the Presenter pattern, and how this can help clean up your templates. Here are a couple of links about using presenters with <a href="http://rubyonrails.org/">Rails</a> that I&#8217;ve found useful:</p>

<ul>
<li><a href="http://blog.jayfields.com/2007/03/rails-presenter-pattern.html">Jay Fields&#8217; Guide to Presenters</a></li>
<li><a href="http://www.slideshare.net/mdesjardins/presenters-in-rails">Mike Desjardins&#8217; Slideshare Presentation</a></li>
</ul>


<p>Consider the following screenshot of a section of a weekly email that we send our users:</p>

<p><img src="http://artsy.github.io/images/2014-03-18-presenters-and-memoization-moving-logic-out-of-templates/recently_added.png" alt="Example of Recently Added Works" /></p>

<p>This section shows works that have been added that week by artists that you follow. That&#8217;s clearly going to involve some database calls, and potentially heavy ones at that. Now we&#8217;d like to accomplish two things here: we want to make sure that we only make these calls once (no matter what we wind up doing with the data later), and we also would like to make sure that any code or logic that is making these calls and doing any data manipulation is not being done directly in our templates. Keeping this kind of logic out of your template will make it easier to debug, maintain and write.</p>

<p>Let&#8217;s start by creating a Module to hold the various logic required for this email:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">WeeklyEmailPresenter</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">=</span> <span class="n">user</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok, so far so good. In our mail template rendering/calling code, we can now say:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@presenter</span> <span class="o">=</span> <span class="no">WeeklyEmailPresenter</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will allow us to refer to methods in this class in our mail template. So now let&#8217;s add a method that will query our database and return a list of artists that this user should be notified about:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">WeeklyEmailPresenter</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">=</span> <span class="n">user</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">recently_added_works</span>
</span><span class='line'>    <span class="c1"># Some really heavy database query</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok, that was easy. In our HAML template, we can now do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="p">-</span><span class="k">if</span> <span class="vi">@presenter</span><span class="o">.</span><span class="n">recently_added_works</span> <span class="o">&amp;&amp;</span> <span class="vi">@presenter</span><span class="o">.</span><span class="n">recently_added_works</span><span class="o">.</span><span class="n">any?</span>
</span><span class='line'>  <span class="nt">%table</span>
</span><span class='line'>    <span class="nt">%tr</span>
</span><span class='line'>      <span class="nt">%td</span>
</span><span class='line'>        <span class="p">-</span><span class="vi">@presenter</span><span class="o">.</span><span class="n">recently_added_works</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">artists</span><span class="o">|</span>
</span><span class='line'>          &lt;!-- markup to render each artist with recently added works --&gt;
</span></code></pre></td></tr></table></div></figure>


<p>However, take a look at how many times we&#8217;ve referred to <code>@presenter.recently_added_works</code> - 3 times already! And we&#8217;ll most likely refer to it more elsewhere (perhaps when deriving a subject line, or showing a total count somewhere, etc.). Depending on how you&#8217;ve implemented the method <code>recently_added_works</code>, you may be re-querying the database every time it&#8217;s referred to! Clearly that&#8217;s a lot of wasted resources. So, let&#8217;s look at an easy change that will guarantee we only ever perform the work to assemble this data once. We memoize it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">WeeklyEmailPresenter</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">=</span> <span class="n">user</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">recently_added_works</span>
</span><span class='line'>    <span class="vi">@recently_added_works</span> <span class="o">||=</span> <span class="n">build_recently_added_works</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">build_recently_added_works</span>
</span><span class='line'>    <span class="c1"># Code to do database lookups</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>All we&#8217;re doing is moving the actual code that&#8217;s doing the heavy lifting into a <code>private</code> method (for convention, I like to prefix the name with <code>build_</code>). The public method that we refer to elsewhere in our presenter and template simply calls the appropriate <code>private</code> method. Through using an instance variable combined with conditional assignment, we guarantee that the <code>build_</code> method (our heavy and slow workhorse method) will only be called once, no matter how many times we refer to the public method.</p>

<p>That&#8217;s it! To summarize, use instance variables in your public methods which is what your templates and other code will use. Those public methods should call private <code>build_</code> methods which actually do all the heavy lifting. This way, you get to easily move logic away from a template and into its own module, and can guarantee that you&#8217;re not repeating any long-running database queries or other slow data processing.</p>

<p>Hopefully you&#8217;ve found this a useful pattern to follow, please leave any feedback in the comments and <a href="https://github.com/artsy">follow us on Github</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Helper to Group Artworks into a Pinterest-style Layout for Email]]></title>
    <link href="http://artsy.github.io/blog/2014/03/17/ruby-helper-to-group-artworks-into-a-pinterest-style-layout-for-email/"/>
    <updated>2014-03-17T19:32:00-04:00</updated>
    <id>http://artsy.github.io/blog/2014/03/17/ruby-helper-to-group-artworks-into-a-pinterest-style-layout-for-email</id>
    <content type="html"><![CDATA[<p><img src="http://artsy.github.io/images/2014-03-17-ruby-helper-to-group-artworks-into-a-pinterest-style-layout-for-email/two-column-layout.png" alt="Example of two column layout" /></p>

<p>Something we&#8217;d like to do is email our users some suggested artworks as part of their personalized emails. The layout of those suggestions should look something like our newly re-designed <a href="https://artsy.net/browse/artworks?price_range=-1%3A1000000000000">Browse</a> page, with a &#8216;salon&#8217; style layout. Here&#8217;s some simple Ruby code that can group artworks into columns for you, that can then be directly rendered in an email (via <a href="http://haml.info/">Haml</a>, <a href="http://mustache.github.io/">Mustache</a>, <a href="http://jade-lang.com/">Jade</a>, or your templating language of choice.)</p>

<!-- more -->


<h2>The code</h2>

<p>First let&#8217;s look at the code, and then I&#8217;ll describe it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ArtworkColumns</span>
</span><span class='line'>  <span class="c1"># Return an array of artworks grouped together in sub arrays by being added to the shortest &#39;column&#39;</span>
</span><span class='line'>  <span class="c1"># based on a fixed width and aspect ratios.</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># @param {Array} artworks The array of artworks to group into columns</span>
</span><span class='line'>  <span class="c1"># @param {Number} num_columns The number of columns to group them into</span>
</span><span class='line'>  <span class="c1"># @param {Number} width The width the images will be displayed at</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># @return {Array} An array of artworks grouped into sub arrays by being added to the shortest one.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">artwork_columns</span><span class="p">(</span><span class="n">artworks</span><span class="p">,</span> <span class="n">num_columns</span><span class="p">,</span> <span class="n">width</span><span class="p">)</span>
</span><span class='line'>    <span class="n">artwork_cols</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Initialize columns</span>
</span><span class='line'>    <span class="n">num_columns</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">artwork_cols</span> <span class="o">&lt;&lt;</span> <span class="o">[]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">artworks</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">artwork</span><span class="o">|</span>
</span><span class='line'>      <span class="n">add_to_shortest_column!</span><span class="p">(</span><span class="n">artwork_cols</span><span class="p">,</span> <span class="n">artwork</span><span class="p">,</span> <span class="n">width</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">artwork_cols</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Adds artwork to shortest column</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">add_to_shortest_column!</span><span class="p">(</span><span class="n">artwork_cols</span><span class="p">,</span> <span class="n">artwork</span><span class="p">,</span> <span class="n">width</span><span class="p">)</span>
</span><span class='line'>    <span class="n">min_height</span> <span class="o">=</span> <span class="n">column_height</span><span class="p">(</span><span class="n">artwork_cols</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span> <span class="n">width</span><span class="p">)</span>
</span><span class='line'>    <span class="n">min_column_idx</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">artwork_cols</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">column</span><span class="p">,</span> <span class="n">idx</span><span class="o">|</span>
</span><span class='line'>      <span class="n">height</span> <span class="o">=</span> <span class="n">column_height</span><span class="p">(</span><span class="n">column</span><span class="p">,</span> <span class="n">width</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">height</span> <span class="o">&lt;</span> <span class="n">min_height</span>
</span><span class='line'>        <span class="n">min_height</span> <span class="o">=</span> <span class="n">height</span>
</span><span class='line'>        <span class="n">min_column_idx</span> <span class="o">=</span> <span class="n">idx</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">artwork_cols</span><span class="o">[</span><span class="n">min_column_idx</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="n">artwork</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Calculate sum of heights of artworks in column</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">column_height</span><span class="p">(</span><span class="n">artwork_col</span><span class="p">,</span> <span class="n">width</span><span class="p">)</span>
</span><span class='line'>    <span class="n">height</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">artwork_col</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">artwork</span><span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">aspect_ratio</span> <span class="o">=</span> <span class="n">artwork</span><span class="o">.</span><span class="n">default_image</span><span class="o">.</span><span class="n">aspect_ratio</span><span class="p">)</span>
</span><span class='line'>        <span class="n">height</span> <span class="o">+=</span> <span class="p">(</span><span class="n">width</span> <span class="o">/</span> <span class="n">aspect_ratio</span><span class="p">)</span><span class="o">.</span><span class="n">floor</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">height</span> <span class="o">+=</span> <span class="n">width</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">height</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The algorithm is quite simple (original JS idea and implementation courtesy of Artsy&#8217;s <a href="https://github.com/gib">Gib</a>). The inputs are fairly obvious, an array of artworks to be grouped, the number of columns to group them into, and the width of each column.</p>

<p>We then simply iterate over all our artworks, and add them to whichever column is shortest. This way we end up with several columns that are for the most part equally sized in height, and as they all have different aspect ratios, when they are rendered in a table, you wind up with a nice looking &#8216;dynamic&#8217; layout. The height of each column is calculated as the sum of the heights of the artworks in each column. The heights are derived from the inputted widths and aspect ratios of the images.</p>

<p>Here&#8217;s how you might iterate over the returned column groupings and render a layout similar to the above:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="p">-</span> <span class="n">artwork_suggestions</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">artwork_arr</span><span class="p">,</span> <span class="n">idx</span><span class="o">|</span>
</span><span class='line'>  <span class="nt">%td</span><span class="p">{</span> <span class="nb">id</span><span class="p">:</span> <span class="s1">&#39;artwork-column&#39;</span><span class="p">,</span> <span class="ss">style</span><span class="p">:</span> <span class="s2">&quot;width: 290px;padding-top:20px;text-align:left;&quot;</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">-</span> <span class="n">artwork_array</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">artwork</span><span class="o">|</span>
</span><span class='line'>      <span class="nt">%a</span><span class="p">{</span> <span class="ss">href</span><span class="p">:</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">canonical_url</span><span class="si">}</span>/artwork/<span class="si">#{</span><span class="n">artwork</span><span class="o">.</span><span class="n">slug</span><span class="si">}</span>?<span class="si">#{</span><span class="vi">@utm_params</span><span class="si">}</span>&quot; }&lt;
</span><span class='line'>        <span class="nt">%img</span><span class="p">{</span> <span class="nb">id</span><span class="p">:</span> <span class="s1">&#39;artwork&#39;</span><span class="p">,</span> <span class="ss">src</span><span class="p">:</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">artwork</span><span class="o">.</span><span class="n">default_image</span><span class="o">.</span><span class="n">image_url</span><span class="p">(</span><span class="ss">:large</span><span class="p">)</span><span class="si">}</span>&quot;, style: &quot;width: 290px;&quot; }
</span><span class='line'>      <span class="nt">%br</span>
</span><span class='line'>      &lt;!-- additional artwork details, title, artist, etc. --&gt;
</span></code></pre></td></tr></table></div></figure>


<p>These few lines of Ruby code have allowed us to move logic out of Haml (yuck!) and into Ruby (yay!) and allow <a href="http://haml.info/">Haml</a> to just focus on rendering the objects passed in (certainly via loops and conditionals, etc.)</p>

<p>That&#8217;s all for now! In my next post I&#8217;ll talk about how I use the Presenter pattern and memoization to move even more logic out of templates (and save some database calls while we&#8217;re at it!)</p>

<p>Thanks again! Post any comments or tips of your own here, and <a href="https://github.com/artsy">follow us on Github</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Tips for Email Layout and Responsiveness]]></title>
    <link href="http://artsy.github.io/blog/2014/03/17/some-tips-for-email-layout-and-responsiveness/"/>
    <updated>2014-03-17T12:36:00-04:00</updated>
    <id>http://artsy.github.io/blog/2014/03/17/some-tips-for-email-layout-and-responsiveness</id>
    <content type="html"><![CDATA[<p><img src="http://artsy.github.io/images/2014-03-17-some-tips-for-email-layout-and-responsiveness/analytics.png" alt="Example of Analytics Email" /></p>

<p>Email can be one of the most powerful ways to engage with your users, and can serve a multitude of purposes. It can be used as a way to highlight selected content (weekly/monthly newsletters, &#8216;year in review&#8217;, etc.), provide a service to users (analytics breakdown of visits to your profile/favorites page), or re-engage with users (new feature announcements, etc.). Here at Artsy we use all of these kinds of emails and have found them to be a very valuable asset. However, best practices for template layout and CSS (keeping in mind the variety of devices and screen sizes that your users have) are quite different from, and very far behind, the current HTML5 standards and practices for making beautiful web pages. In this article, I&#8217;d like to present some techniques I&#8217;ve successfully used at Artsy to create emails that look good on your browser or mobile device, in some of the most popular email clients out there.</p>

<!-- more -->


<h2>The Main Difference Between Email and Web</h2>

<p>A fundamental difference between email and web, and which essentially accounts for the completely different methodology and rules you should follow for emails, is that of the rendering client. In 2014, (assuming you are not supporting certain legacy versions of Internet Explorer and other old versions), browsers for the most part will render passed in HTML and CSS in a standard fashion. While there are some notable exceptions still, graceful degradation is quite possible. That is because the only &#8216;interpreter&#8217; of your HTML is the end user&#8217;s browser, which operates under a certain set of known rules. With emails however, the interpreter is the end user&#8217;s mail client of choice, which can be: native iOS apps, web apps, and even standalone desktop applications. All of these do their own parsing/interpreting before rendering, which can cause HTML that results in a nice looking web page to look totally broken in an email, as well as the same exact email looking remarkably different across mail clients. One of the main reasons why email clients do this is to remove things that might interfere with the rendering of the mail client itself, or any security risks.</p>

<p>Also of note is that the use of Javascript within an email is of course, not possible. Additionally, the HTML that will be emailed to your users needs to be sent as one file with inlined CSS. You can use a tool like <a href="https://github.com/premailer/premailer/">premailer</a> to allow you to develop your CSS separately and then convert to an inline style.</p>

<h2>Some Basics about Tables</h2>

<p>Yes, it&#8217;s 2014, and yes, we&#8217;re going to talk about tables on an engineering blog. That&#8217;s because for emails, tables are going to be your main tool to position and lay out your content. Two of the most common CSS selectors (<code>position</code> and <code>display</code>) are bad ideas to use in email. They are mostly unsupported by mail clients (which will reach in and rewrite your HTML/CSS) and will lead to unexpected looking output. However, you can achieve virtually any layout desired using tables.</p>

<p>Here is sample HTML that generates the top part of the email shown above. While it may make your eyes bleed from the table use, notice we are able to achieve the beginnings of a basic 3-column layout, with equal-width columns and centered headers/text with no position-related CSS.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;table</span> <span class="na">border=</span><span class="s">&#39;0&#39;</span> <span class="na">cellpadding=</span><span class="s">&#39;0&#39;</span> <span class="na">cellspacing=</span><span class="s">&#39;0&#39;</span> <span class="na">style=</span><span class="s">&#39;margin: 0 20px; table-layout: fixed;&#39;</span> <span class="na">width=</span><span class="s">&#39;600px&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td</span> <span class="na">align=</span><span class="s">&#39;center&#39;</span> <span class="na">colspan=</span><span class="s">&#39;3&#39;</span> <span class="na">style=</span><span class="s">&#39;padding: 0px 0px 15px&#39;</span> <span class="na">valign=</span><span class="s">&#39;middle&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;font</span> <span class="na">color=</span><span class="s">&#39;black&#39;</span> <span class="na">style=</span><span class="s">&#39;font-family: Georgia, serif;font-size: 16px; line-height: 1.3em; letter-spacing:2px;text-transform:uppercase;&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>        Cats Galore at the Cat Art Fair 2014
</span><span class='line'>      <span class="nt">&lt;/font&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td</span> <span class="na">align=</span><span class="s">&#39;left&#39;</span> <span class="na">style=</span><span class="s">&#39;padding: 0px 0px 15px; border-right: 1px solid grey;&#39;</span> <span class="na">valign=</span><span class="s">&#39;middle&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;font</span> <span class="na">color=</span><span class="s">&#39;black&#39;</span> <span class="na">style=</span><span class="s">&#39;font-family: Georgia, serif;font-size: 16px; line-height: 1.3em;&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&#39;text-align: center; font-size: 23px;&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>          24
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&#39;text-align: center;&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>          works
</span><span class='line'>          in your booth
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/font&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td</span> <span class="na">align=</span><span class="s">&#39;middle&#39;</span> <span class="na">style=</span><span class="s">&#39;padding: 0px 0px 15px; border-right: 1px solid grey;&#39;</span> <span class="na">valign=</span><span class="s">&#39;middle&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;font</span> <span class="na">color=</span><span class="s">&#39;black&#39;</span> <span class="na">style=</span><span class="s">&#39;font-family: Georgia, serif;font-size: 16px; line-height: 1.3em;&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&#39;text-align: center; font-size: 23px;&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>          3,086
</span><span class='line'>          <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&#39;text-align: center;&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>          total artwork views
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/font&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td</span> <span class="na">align=</span><span class="s">&#39;right&#39;</span> <span class="na">valign=</span><span class="s">&#39;middle&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;font</span> <span class="na">color=</span><span class="s">&#39;black&#39;</span> <span class="na">style=</span><span class="s">&#39;font-family: Georgia, serif;font-size: 16px; line-height: 1.3em;&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&#39;text-align: center; font-size: 23px;&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>        471
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&#39;text-align: center;&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>        cities reached
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/font&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="c">&lt;!-- more content below --&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now under this we present a heatmap and table of top views by city. For that we use the same 3-column table, except specify a colspan of 2 on the column that contains the heatmap. That is because we would like that column to take up a width equal to the first 2 columns of the equally spaced three at the top, and the table of top views will take up the last column. Here&#8217;s that markup:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;tr&gt;</span>
</span><span class='line'><span class="nt">&lt;td</span> <span class="na">align=</span><span class="s">&#39;left&#39;</span> <span class="na">colspan=</span><span class="s">&#39;2&#39;</span> <span class="na">style=</span><span class="s">&#39;padding: 0px 0px 15pxl; width: 66%;&#39;</span> <span class="na">valign=</span><span class="s">&#39;middle&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&#39;link_to_heatmap.png&#39;</span> <span class="na">width=</span><span class="s">&#39;400px&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/td&gt;</span>
</span><span class='line'><span class="nt">&lt;td</span> <span class="na">align=</span><span class="s">&#39;right&#39;</span> <span class="na">style=</span><span class="s">&#39;padding: 0px 23px 15px; width: 33%; text-align:left;&#39;</span> <span class="na">valign=</span><span class="s">&#39;middle&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;font</span> <span class="na">color=</span><span class="s">&#39;black&#39;</span> <span class="na">style=</span><span class="s">&#39;font-family: Georgia, serif;font-size: 12px; line-height: 1.3em; font-weight:bold;&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    Top 10 Cities
</span><span class='line'>  <span class="nt">&lt;/font&gt;</span>
</span><span class='line'>  <span class="nt">&lt;font</span> <span class="na">color=</span><span class="s">&#39;black&#39;</span> <span class="na">style=</span><span class="s">&#39;font-family: Georgia, serif;font-size: 12px; line-height: 1.3em;&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    New York
</span><span class='line'>    21.66%
</span><span class='line'>    <span class="nt">&lt;br&gt;</span>
</span><span class='line'>    London
</span><span class='line'>    3.34%
</span><span class='line'>    <span class="nt">&lt;br&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- &#39;br&#39; separated string of views --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/font&gt;</span>
</span><span class='line'><span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that again we are using no position or display related CSS. However, now our table has a 3 column section and a 2 column section, and we are well on our way to creating a nice email! I kept these as separate rows in the same table, but could have equivalently had each of them be their own table with no ill effects and almost the same markup. Depending on your design and layout, you may need to have multiple tables (nested and not) to support different widths and column layouts, however they should all just <em>work</em>.</p>

<h2>Background Images and Overlayed Text</h2>

<p>Ok, so tables are all well and good and you can achieve a lot using them, and without having to use any display or position CSS. But what if you want to overlay text on an image? (or even another image over an image)? On a web page, there are many ways to accomplish that, but they all use CSS that you really should not be using in emails (namely: <code>position</code>, <code>display</code>, <code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code>, and most layout properties besides padding. Also, no negative padding please!). But no worries, because you can still accomplish that using background images!</p>

<p>Here is an example from our current welcome mail to users:</p>

<p><img src="http://artsy.github.io/images/2014-03-17-some-tips-for-email-layout-and-responsiveness/welcome_desktop.png" alt="Example of Welcome Mail" /></p>

<p>The top part (the iPhone pic) is actually two images (the picture, and the App Store logo), as well as some text overlayed on top. Here is the HTML to accomplish that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;table</span> <span class="na">cellpadding=</span><span class="s">&#39;0&#39;</span> <span class="na">cellspacing=</span><span class="s">&#39;0&#39;</span> <span class="na">id=</span><span class="s">&#39;iphone-table&#39;</span> <span class="na">style=</span><span class="s">&#39;border: 0;padding:10px 0px 15px 0px;width:625px&#39;</span> <span class="na">width=</span><span class="s">&#39;625&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;td</span> <span class="na">align=</span><span class="s">&#39;left&#39;</span> <span class="na">valign=</span><span class="s">&#39;middle&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;table</span> <span class="na">background=</span><span class="s">&#39;link_to_phone.png&#39;</span> <span class="na">cellpadding=</span><span class="s">&#39;0&#39;</span> <span class="na">cellspacing=</span><span class="s">&#39;0&#39;</span> <span class="na">height=</span><span class="s">&#39;265&#39;</span> <span class="na">style=</span><span class="s">&#39;height:265px;width:625px&#39;</span> <span class="na">width=</span><span class="s">&#39;625&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>          <span class="nt">&lt;td</span> <span class="na">style=</span><span class="s">&#39;padding-top:57px;padding-right:53px;padding-left:375px;text-align:center;&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&#39;line-height:26px;&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>              <span class="nt">&lt;font</span> <span class="na">style=</span><span class="s">&#39;text-transform: uppercase; font-size: 19px; font-family: Georgia, serif; color: white;-webkit-font-smoothing:antialiased;&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>                Download Artsy for iPhone
</span><span class='line'>              <span class="nt">&lt;/font&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&#39;padding-top:10px;&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>              <span class="nt">&lt;font</span> <span class="na">style=</span><span class="s">&#39;font-size: 14px; font-family: Georgia, serif; color: white;-webkit-font-smoothing:antialiased;&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>                The art world in your pocket.
</span><span class='line'>              <span class="nt">&lt;/font&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>          <span class="nt">&lt;td</span> <span class="na">align=</span><span class="s">&#39;right&#39;</span> <span class="na">style=</span><span class="s">&#39;padding-right:82px;vertical-align:top;&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&#39;https://itunes.apple.com/us/app/artsy-art-world-in-your-pocket/id703796080?ls=1&amp;amp;mt=8&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>              <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&#39;app_store.png&#39;</span> <span class="na">style=</span><span class="s">&#39;border: none; outline: none; vertical-align:top;&#39;</span> <span class="na">width=</span><span class="s">&#39;140px&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/a&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/table&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I chose to use a separate table to hold this content, where the background image for this table is the picture of the iPhone in hand. That table (with a background of the photo) has two rows, each with one column. The first row which is for the top part of the image, contains the &#8216;Download&#8217; white text. That is positioned within the column through padding, which is well supported by most mail clients (as long as it&#8217;s positive padding that is!) The second row, for the bottom part of the image, is a picture of the &#8216;Download on the App Store&#8217; logo, and we chose to put that in an anchor tag and link to the App Store. You could have alternatively made this image a background as well to achieve the same overlay effect, as well as added more overlaid text, etc.</p>

<p>Essentially, to overlay text on images, and images on images - your only option in email is to use background images.</p>

<h2>Mobile Responsiveness</h2>

<p>Ok, at this point we know how to craft some &#8216;dynamic&#8217; layouts, (multi-column, sidebar, etc) and can overlay text and images for added effect. Now let&#8217;s think about how this should work/look on a mobile device. Media queries will be our tool of choice here (well supported by mobile mail clients, with a notable exception being the Gmail iOS app.)</p>

<p>Something to keep in mind, depending on your use case, is to potentially design the email in the first place with mobile in mind. This can mean larger font sizes across the layout, as well as a single or two column layout max for your content. Since you have much less screen space to work with on mobile, the media queries we are going to use will largely be to increase font sizes, as well as using &#8216;width&#8217; and &#8216;float&#8217; to force a two column layout into one column (as an example). Depending on the mail design, this can be simple to do, or quite tricky. It&#8217;s worth considering this in your initial designs.</p>

<p>Now the first thing to do is to include the following meta tag in your HTML:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>  <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&#39;viewport&#39;</span> <span class="na">content=</span><span class="s">&#39;width=device-width, initial-scale=1.0&#39;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will tell the browser to treat the viewport size as the size of the device that is being used. This combined with media queries will enable us to create mobile emails.</p>

<p>As an example, consider the following two images. The first is the desktop version of the top part of a personalized weekly mail (blog post on how we efficiently generate these to come!), and the second is the mobile version of that same mail.</p>

<p><img src="http://artsy.github.io/images/2014-03-17-some-tips-for-email-layout-and-responsiveness/personalized_desktop.png" alt="Example of Personalized Desktop" /></p>

<p><img src="http://artsy.github.io/images/2014-03-17-some-tips-for-email-layout-and-responsiveness/personalized_summary.png" alt="Example of Personalized Mobile" /></p>

<p>The markup for this is pretty vanilla (similar to above, 3 column layout in a table). For mobile, we want to left-align everything and trim things down to one column. Of note here is that we are truncating text with ellipsis in the desktop version, and when the content reflows to one column we actually have <em>more</em> room to reveal the text (but still keeping truncation in just in case), so we have to enclose the text in a <code>div</code> (must have a block element for truncation)</p>

<p>Here is how we truncate text:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&#39;row-to-expand&#39;</span> <span class="na">style=</span><span class="s">&#39;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;width:150px;&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    Some really long text that will get truncated
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We specify a width on a block-level element and then use the ellipsis trick. Here&#8217;s another screenshot of the truncation in action:</p>

<p><img src="http://artsy.github.io/images/2014-03-17-some-tips-for-email-layout-and-responsiveness/personalized_shows.png" alt="Example of Shows Listing" /></p>

<p> Our first media query can be something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'>  <span class="k">@media</span> <span class="o">(</span><span class="nt">max-device-width</span><span class="o">:</span> <span class="nt">320px</span><span class="o">)</span><span class="p">{</span>
</span><span class='line'>    <span class="nt">div</span><span class="o">[</span><span class="nt">id</span><span class="o">=</span><span class="s1">&#39;row-to-expand&#39;</span><span class="o">]</span><span class="p">{</span>
</span><span class='line'>      <span class="k">width</span><span class="o">:</span> <span class="m">260px</span> <span class="cp">!important</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;ve set the breakpoint at 320px (vertical layout on an iPhone), and at widths less than or equal to that, this rule will kick in. Note the &#8216;!important&#8217; at the end (all of our media queries will have that to allow them to override the existing inline CSS). This is enough to expand that div and reveal more text.</p>

<p>Here&#8217;s the media queries for the rest of this section that transforms the three column layout into one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'>  <span class="k">@media</span> <span class="o">(</span><span class="nt">max-device-width</span><span class="o">:</span> <span class="nt">320px</span><span class="o">)</span><span class="p">{</span>
</span><span class='line'>    <span class="nt">td</span><span class="o">[</span><span class="nt">id</span><span class="o">=</span><span class="s1">&#39;summary-col&#39;</span><span class="o">]</span><span class="p">{</span>
</span><span class='line'>      <span class="k">float</span><span class="o">:</span> <span class="k">left</span> <span class="cp">!important</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nt">td</span><span class="o">[</span><span class="nt">id</span><span class="o">=</span><span class="s1">&#39;summary-header&#39;</span><span class="o">]</span><span class="p">{</span>
</span><span class='line'>      <span class="k">float</span><span class="o">:</span> <span class="k">right</span> <span class="cp">!important</span><span class="p">;</span>
</span><span class='line'>      <span class="k">width</span><span class="o">:</span> <span class="m">300px</span> <span class="cp">!important</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nt">td</span><span class="o">[</span><span class="nt">id</span><span class="o">=</span><span class="s1">&#39;nested-summary-col&#39;</span><span class="o">]</span><span class="p">{</span>
</span><span class='line'>      <span class="k">width</span><span class="o">:</span> <span class="m">300px</span> <span class="cp">!important</span><span class="p">;</span>
</span><span class='line'>      <span class="k">float</span><span class="o">:</span> <span class="k">left</span> <span class="cp">!important</span><span class="p">;</span>
</span><span class='line'>      <span class="k">padding</span><span class="o">:</span> <span class="m">0px</span> <span class="cp">!important</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nt">table</span><span class="o">[</span><span class="nt">id</span><span class="o">=</span><span class="s1">&#39;summary&#39;</span><span class="o">]</span><span class="p">{</span>
</span><span class='line'>      <span class="k">width</span><span class="o">:</span> <span class="m">300px</span> <span class="cp">!important</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>where the <code>td[id='nested-summary-col']</code> are the <code>td</code>s that hold the thumbnail and artist or gallery name.
Essentially all we are doing is changing the width of the container/parent table to 300px, and then making the width of each <code>td</code> 300px and adding a float. This will force your table to now be a one column layout- easy!</p>

<h3>Some misc. email tweaks</h3>

<p>Sometimes it becomes necessary to hide/show certain things for mobile or desktop. This can be a bit tricky due to not being able to use <code>display:none;</code> , so here are a few things I&#8217;ve found that worked:</p>

<ul>
<li><code>width: 0px;</code> (works for hiding images)</li>
<li><code>line-height: 0px;</code> (works for hiding text)</li>
<li><code>font-size: 0px;</code> (works for hiding text)</li>
</ul>


<p>Another thing you might encounter is that text links automatically become blue in email. This is because many mail clients will take an un-styled or black link text and make them a default blue color. An easy hack to get around this is to explicitly color your links something like &#8216;#000001&#8217;. This &#8216;almost-black&#8217; will be left untouched by mail clients, yet is close enough to black that the naked eye can&#8217;t perceive the difference.</p>

<p>Here&#8217;s a screenshot of an <a href="https://github.com/desandro/isotope">isotope</a> or <a href="https://www.pinterest.com/">Pinterest</a> column style layout, with truncation of text, and resized for mobile (running the full gamut of tricks):</p>

<p><img src="http://artsy.github.io/images/2014-03-17-some-tips-for-email-layout-and-responsiveness/personalized_suggestions.png" alt="Example of Personalized Suggestions" /></p>

<p><a href="https://gist.github.com/mzikherman/9610125">Here is a gist</a> I use to prepare artworks for a columnar display like this. You pass in a collection of artworks (where each artwork is arbitrarily sized), and the number of columns and width of the desired output. It will return the artworks grouped into columns that can be directly rendered in an email, while respecting aspect ratios and ensuring the columns are of <em>approximately</em> equal height - resulting in a dynamic feeling layout. For this email, we group this set of artworks into 2 coumns, with each column having a width of 300px (for desktop).</p>

<h2>Great tools to use:</h2>

<ul>
<li><a href="https://github.com/premailer/premailer/">Premailer</a> This will enable you to develop CSS in a sane (ie- not inline) way, and then at generation/compile time, inline it for you.</li>
<li><a href="http://litmus.com/">Litmus</a> Using Litmus&#8217;s VM&#8217;s with different OS&#8217;s and mail clients, you can preview how a sample email will look among all sorts of different configurations. I recommend figuring out what mail clients/browsers/OS&#8217;s you want to target and making sure you test all your emails here.</li>
<li><a href="http://haml.info/">Haml</a> (or any templating language of choice). A lot of the blocks of content in our mails are dynamically generated, and Haml&#8217;s conditionals and looping syntax, as well as
Ruby-style string evaluation has proven invaluable.</li>
</ul>


<hr />

<p>That&#8217;s all for now! With a lot of trial and error, I&#8217;ve built up a toolbelt of tricks, techniques and hacks I&#8217;ve been using to develop responsive and pretty emails quickly. I think of the limited set of tools at my disposal as a puzzle with which you can still create great looking and responsive layouts to feature your content. Previewing mails using <a href="http://mailchimp.com/features/inbox-inspector/">Inbox Inspector</a> have enabled me to craft, deploy, and send them to our users with confidence. Post any comments or tips of your own here, and <a href="https://github.com/artsy">follow us on Github</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Detecting trends using Forgetsy]]></title>
    <link href="http://artsy.github.io/blog/2014/03/17/detecting-trends-with-forgetsy/"/>
    <updated>2014-03-17T11:32:00-04:00</updated>
    <id>http://artsy.github.io/blog/2014/03/17/detecting-trends-with-forgetsy</id>
    <content type="html"><![CDATA[<p><img src="http://artsy.github.io/images/2014-03-17-detecting-trends-with-forgetsy/monolith.jpg" alt="Armory Trending Screen" /></p>

<p>As part of our partnership with <a href="https://www.thearmoryshow.com/">The New York Armory Show</a> this year, we installed a number of terminals throughout the fair. These screens used our own real-time data to display an ever shifting set of trending artworks, artists, and booths, to the attendees.</p>

<p>Out of this work, we&#8217;ve open-sourced <a href="https://github.com/cavvia/forgetsy">Forgetsy</a>, a lightweight Ruby trending library. Put simply, Forgetsy implements data structures that forget. Loosely based on Bit.ly&#8217;s <a href="http://word.bitly.com/post/41284219720/forget-table">Forget Table</a> concept, Forgetsy uses decaying counters to track temporal trends in categorical distributions.</p>

<!-- more -->


<h2>Anatomy of a Trend</h2>

<p>To clarify the term &#8216;trend&#8217;, let&#8217;s take this graph of cumulative artist searches over time as an example.</p>

<p><img src="http://artsy.github.io/images/2014-03-17-detecting-trends-with-forgetsy/searches.png" alt="Artist Search Graphs" /></p>

<p>On the left-hand side, we see a steepening gradient (denoted by the dashed lines) for Banksy during his residency in New York (Oct 2013), but in contrast a linear rise in searches for Warhol over the same period. We define a &#8216;trend&#8217; as this rise in the <em>rate</em> of observations of a particular event over a time period, which we&#8217;ll call τ.</p>

<p>In Forgetsy, trends are encapsulated by a construct named <em>delta</em>. A <em>delta</em> consists of two sets of counters, each of which implements <a href="https://en.wikipedia.org/wiki/Exponential_decay">exponential decay</a> of the following form.</p>

<p><img src="http://latex.codecogs.com/gif.latex?X_t_1%3DX_t_0%5Ctimes%7Be%5E%7B-%5Clambda%5Ctimes%7Bt%7D%7D%7D" alt="Exponential Decay" /></p>

<p>Where the inverse of the decay rate (λ) is the lifetime of an observation in the set, τ. By normalising one set by a set with half the decay rate (or double the lifetime), we obtain a trending score for each category in a distribution. This score expresses the change in the rate of observations of a category over the lifetime of the set, as a proportion in the range [0,1].</p>

<p>Forgetsy removes the need for manually sliding time windows or explicitly maintaining rolling counts, as observations naturally decay away over time. It&#8217;s designed for heavy writes and sparse reads, as it implements decay at read time. Each set is implemented as a <a href="http://redis.io/">redis</a> sorted set, and keys are scrubbed when a count is decayed to near zero, providing storage efficiency.</p>

<p>As a result, Forgetsy handles distributions with up to around 10<sup>6</sup> active categories, receiving hundreds of writes per second, without much fuss.</p>

<h2>Usage</h2>

<p>Take a social network in which users can follow each other. You want to track trending users. You construct a delta with a one week lifetime, to capture trends in your follows data over one week periods:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">follows_delta</span> <span class="o">=</span> <span class="ss">Forgetsy</span><span class="p">:</span><span class="ss">:Delta</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="s1">&#39;user_follows&#39;</span><span class="p">,</span> <span class="ss">t</span><span class="p">:</span> <span class="mi">1</span><span class="o">.</span><span class="n">week</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The delta consists of two sets of counters indexed by category identifiers. In this example, the identifiers will be user ids. One set decays over the mean lifetime specified by τ, and another set decays over double the lifetime.</p>

<p>You can now add observations to the delta, in the form of follow events. Each time a user follows another, you increment the followed user id. You can also do this retrospectively:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">follows_delta</span><span class="o">.</span><span class="n">incr</span><span class="p">(</span><span class="s1">&#39;UserFoo&#39;</span><span class="p">,</span> <span class="ss">date</span><span class="p">:</span> <span class="mi">2</span><span class="o">.</span><span class="n">weeks</span><span class="o">.</span><span class="n">ago</span><span class="p">)</span>
</span><span class='line'><span class="n">follows_delta</span><span class="o">.</span><span class="n">incr</span><span class="p">(</span><span class="s1">&#39;UserBar&#39;</span><span class="p">,</span> <span class="ss">date</span><span class="p">:</span> <span class="mi">10</span><span class="o">.</span><span class="n">days</span><span class="o">.</span><span class="n">ago</span><span class="p">)</span>
</span><span class='line'><span class="n">follows_delta</span><span class="o">.</span><span class="n">incr</span><span class="p">(</span><span class="s1">&#39;UserBar&#39;</span><span class="p">,</span> <span class="ss">date</span><span class="p">:</span> <span class="mi">1</span><span class="o">.</span><span class="n">week</span><span class="o">.</span><span class="n">ago</span><span class="p">)</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Providing an explicit date is useful if you are processing data asynchronously. You can also use the <code>incr_by</code> option to increment a counter in batches. You can now consult your follows delta to find your top trending users:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="n">follows_delta</span><span class="o">.</span><span class="n">fetch</span>
</span></code></pre></td></tr></table></div></figure>


<p>Will print:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span> <span class="s1">&#39;UserFoo&#39;</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mi">789</span><span class="p">,</span> <span class="s1">&#39;UserBar&#39;</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mi">367</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each user is given a dimensionless score in the range [0,1] corresponding to the normalised follows delta over the time period. This expresses the proportion of follows gained by the user over the last week compared to double that lifetime.</p>

<p>Optionally fetch the top <em>n</em> users, or an individual user&#8217;s trending score:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">follows_delta</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="ss">n</span><span class="p">:</span> <span class="mi">20</span><span class="p">)</span>
</span><span class='line'><span class="n">follows_delta</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="ss">bin</span><span class="p">:</span> <span class="s1">&#39;UserFoo&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>For more information on usage, check out the <a href="https://github.com/cavvia/forgetsy">github project</a> page.</p>

<h2>In the Wild</h2>

<p>In practice, we use linear, weighted combinations of deltas to produce trending scores for any given domain, such as artists. Forgetsy doesn&#8217;t provide a server, but we send events to an rpc service that updates the deltas in a streamed manner. These events might include artist follows, artwork favorites, auction lot sales or individual page views.</p>

<p>One requirement we have is lifetime flexibility. Forgetsy lets us stipulate the trending period τ on a delta by delta basis. This allows us to lower the lifetime significantly in a fair context, in which we track trends over just a few hours, contrasted with a general art market context, in which we&#8217;re interested in trends over weeks and months.</p>

<p>In summary, the delta structures provided by Forgetsy provide you with a simple, scalable, transparent base for a trending algorithm that can be tuned to suit the specific dynamics of the domain in question.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Isolating Spurious and Nondeterministic Tests]]></title>
    <link href="http://artsy.github.io/blog/2014/01/30/isolating-spurious-and-nondeterministic-tests/"/>
    <updated>2014-01-30T14:42:00-05:00</updated>
    <id>http://artsy.github.io/blog/2014/01/30/isolating-spurious-and-nondeterministic-tests</id>
    <content type="html"><![CDATA[<p>Testing is a critical part of our workflow at <a href="https://artsy.net">Artsy</a>. It gives us confidence to make regular, aggressive enhancements. But anyone who has worked with a large, complex test suite has struggled with occasional failures that are difficult to reproduce or fix.</p>

<p>These failures might be due to slight timing differences or lack of proper isolation between tests. Integration tests are particularly thorny, since problems can originate not only in application code, but in the browser, testing tools (e.g., <a href="http://docs.seleniumhq.org/">Selenium</a>), database, network, or external APIs and dependencies.</p>

<h2>The Quarantine</h2>

<p>We&#8217;ve been <a href="http://artsy.github.io/blog/2012/05/15/how-to-organize-over-3000-rspec-specs-and-retry-test-failures/">automatically retrying failed tests</a>, with some success. However, these problems tend to get worse. (If you have 10 tests that each have a 1% chance of failing, roughly 1 in 10 builds will fail. If you have 50, 4 in 10 builds will fail.)</p>

<p>Martin Fowler offers the most compelling thoughts on this topic in <a href="http://martinfowler.com/articles/nonDeterminism.html">Eradicating Non-Determinism in Tests</a>. (Read it, really.) He suggests quarantining problematic tests in a separate suite, so they don&#8217;t block the build pipeline.</p>

<!-- more -->


<h2>Setting it up</h2>

<p>This turned out to be pretty easy to set up, using our preferred tools of <a href="https://relishapp.com/rspec">RSpec</a> and <a href="http://travis-ci.com/">Travis</a>. First, tag a problem test with <code>spurious</code>:</p>

<pre><code>it 'performs tricky browser interaction', spurious: true do
  ...
end
</code></pre>

<p>Your continuous integration script can exclude the tagged tests as follows:</p>

<pre><code>bundle exec rspec --tag ~spurious
</code></pre>

<p>We&#8217;d like to be aware of spurious failures, but not allow them to fail the build. In our app&#8217;s <code>.travis.yml</code> file, this is as simple as adding a script entry that always exits with <code>0</code> status:</p>

<pre><code>language: ruby
rvm:
  - 1.9.3
script:
  - "bundle exec rspec --tag ~spurious"
  - "bundle exec rspec --tag spurious || true"
</code></pre>

<p>We&#8217;ll see any spurious failures in the build&#8217;s output, but our pipeline won&#8217;t be affected.</p>

<h2>Bonus: Limiting quarantined tests</h2>

<p>So, what prevents the quarantine from getting larger and larger, while the test suite gets weaker and weaker? Fowler <a href="http://martinfowler.com/articles/nonDeterminism.html#Quarantine">recommends</a> enforcing a limit on the number of quarantined tests (e.g., 8).</p>

<p>We can even trigger a build failure if the limit is exceeded. This <code>.travis.yml</code> writes the spurious suite&#8217;s abbreviated output to a file, then asserts that the summary mentions no more than &#8220;8 examples&#8221;:</p>

<pre><code>language: ruby
rvm:
  - 1.9.3
script:
  - "bundle exec rspec --tag ~spurious"
  - "bundle exec rspec --tag spurious --format documentation --format progress --out spurious.out || true"
  - "[[ $(grep -oE '^\d+' spurious.out) -le 8 ]]"
</code></pre>

<h2>Conclusion</h2>

<p>The quarantine is no excuse to create tests that fail under realistic conditions. It&#8217;s simply a framework for recognizing and, eventually, fixing or eliminating the problematic tests that inevitably crop up in a complex environment.</p>

<p>Hopefully, our experiment is useful to other teams struggling with unreliable builds. Share any feedback in the comments!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rendering on the Server and Client in Node.js]]></title>
    <link href="http://artsy.github.io/blog/2013/11/30/rendering-on-the-server-and-client-in-node-dot-js/"/>
    <updated>2013-11-30T22:38:00-05:00</updated>
    <id>http://artsy.github.io/blog/2013/11/30/rendering-on-the-server-and-client-in-node-dot-js</id>
    <content type="html"><![CDATA[<p><img src="http://artsy.github.io/images/2013-12-18-rendering-on-the-server-and-client-in-node-dot-js/isomorphic.png" alt="Diagram of Shared Server/Client Architecture" /></p>

<p>At Artsy we&#8217;ve been building <a href="http://nodejs.org/">Node.js</a> applications that share code and rendering between the server and browser. We&#8217;ve seen many benefits from this &#8211; pages load faster, we can optimize SEO, developers are more productive, and JavaScript coding is just an overall better experience.</p>

<p>Today we&#8217;re happy to announce <a href="http://ezeljs.com/">Ezel</a>, our open source boilerplate we use to bootstrap our Node projects and the <a href="https://github.com/artsy/benv">various</a> <a href="https://github.com/artsy/backbone-super-sync">node</a> <a href="https://github.com/artsy/sharify">modules</a> that built up to it.</p>

<p>In his article, <a href="http://nerds.airbnb.com/isomorphic-JavaScript-future-web-apps/"><em>Isomorphic JavaScript: The Future of Web Apps</em></a>, Spike Brehm from AirBnB describes this growing trend well and we&#8217;re excited to be a part of it. In this article I&#8217;ll tell Artsy&#8217;s story of moving from a single monolithic application to modular <a href="http://backbonejs.org/">Backbone</a> apps that run in Node and the browser and consume our external API.</p>

<!-- more -->


<h2>Growing Pains</h2>

<p><img src="http://artsy.github.io/images/2013-12-18-rendering-on-the-server-and-client-in-node-dot-js/rails-evolution.png" alt="Evolution of Artsy SOA Diagramm" /></p>

<p>Artsy started as a mostly standard <a href="http://rubyonrails.org/">Rails</a> app almost three years ago. In these beginnings we were wildly productive and owe a lot of props to this great framework. However as time went on we started to deviate from the conventional Rails path until we were hardly leveraging much Rails at all. To support an early iOS app we used <a href="https://github.com/intridea/grape">Grape</a> to build an API. While building our API we wrote a lot of client-side JavaScript and soon integrated <a href="http://backbonejs.org/">Backbone</a> for organization. Eventually we cleanly separated our project into a single page Backbone app talking to our API all on inside of this original repository.</p>

<p>We knew we were outgrowing this monolithic project because we had some clear problems&#8230;</p>

<ul>
<li>Slow initial page loads because of lacking server-side rendering. Twitter <a href="https://blog.twitter.com/2012/improving-performance-twittercom">describes this problem well</a>.</li>
<li>Slow following client-side renders because of downloading large asset packages without clear ways to break them up.</li>
<li>SEO issues like building <a href="https://developers.google.com/webmasters/ajax-crawling/docs/specification">escaped fragment</a> pages in Ruby on the server while our users saw what JavaScript rendered on the client.</li>
<li>Maintaining duplicated Ruby/JavaScript code such as templates, date libraries, etc.</li>
<li>Very slow and brittle tests. We had a massive integration test suite consisting of over 3000 <a href="https://github.com/jnicklas/capybara">Capybara</a> tests that took hours to run because we lacked good JavaScript testing tools.</li>
<li>Poor mobile experience from trying to responsively scale down a large single page app with bloated and unused assets.</li>
<li>Slow asset compilation, server boot, and general build times. Productivity suffered greatly as more code was added to the same monolithic project.</li>
</ul>


<h2>There&#8217;s Got to Be a Better Way</h2>

<p>A monolithic app that treats it&#8217;s client-side code as a second class citizen was clearly not going to scale. Our poor mobile web experience was a good candidate to try something new. So we started building a separate mobile optimized website (m.artsy.net).</p>

<p>Some goals became clear:</p>

<ul>
<li>Better client-side tools from JavaScript testing to package managers.</li>
<li>Share rendering code server/client to reduce duplication and optimize initial page load.</li>
<li>Flexibility. We needed a way to divide our app into smaller chunks with smaller asset packages.</li>
</ul>


<h2>Choosing Technology</h2>

<p><img src="http://artsy.github.io/images/2013-12-18-rendering-on-the-server-and-client-in-node-dot-js/tech.png" alt="Logos of Browserify, Express, and Backbone" /></p>

<p>Node was a clear choice because it made sharing rendering code server/client possible where other languages and frameworks struggle to do so. There were some existing Node projects that accomplish this such as <a href="http://derbyjs.com/">Derby</a> and <a href="https://github.com/airbnb/rendr">Rendr</a>. However, adopting these had challenges of their own including being difficult to integrate with our API, learning unnecessary conventions, or being early prototypes with lacking documentation.</p>

<p>We wanted an approach that breaks our app into smaller, more flexible, pieces. Not all of Artsy needs to be a thick-client app, or even use much client-side JavaScript at all. Adopting an existing solution and combining most of the server and client into a shared abstraction seemed like an unnecessary black box. After trying many other frameworks we found a combination of lower-level tools to be a clear winner.</p>

<p>We open sourced this combination of tools and patterns into <a href="http://ezeljs.com/">Ezel</a>. Ezel is a light-weight boilerplate project using <a href="http://expressjs.com/">Express</a> and <a href="http://backbonejs.org/">Backbone</a> for structure, and <a href="http://browserify.org/">Browserify</a> to compose modules that can be shared server/client.</p>

<h2>Sharing and Rendering Server/Client</h2>

<p><img src="http://artsy.github.io/images/2013-12-18-rendering-on-the-server-and-client-in-node-dot-js/rendering.png" alt="Diagram of Server + Client Render" /></p>

<p>To share rendering code server/client we had to make sure our templates and objects being passed in to them could work the same server/client.</p>

<h3>Sharing Objects (Backbone Models)</h3>

<p><a href="http://browserify.org/">Browserify</a> lets you write modules that can run in Node or the browser. Since Backbone is able to be required on the server out of the box, it&#8217;s easy to write models and collections that can be required on both sides with Browserify. However, there are two main speed bumps in doing this:</p>

<ol>
<li><p>Backbone uses AJAX for persistence.</p>

<p>We needed a Backbone.sync adapter that makes HTTP requests server-side, so we wrote one and <a href="https://github.com/artsy/backbone-super-sync">it&#8217;s open sourced.</a></p></li>
<li><p>Data from the server needed to be shared in modules that are used server/client.</p>

<p>For instance, our API is an external URL stored in an environment variable. We needed to use this variable in a module that will be required on the server and the client with Browserify. <a href="http://backbonejs.org/#FAQ-bootstrap">Bootstrapping data</a> is a common technique to share data from the server by embedding JavaScript in the initial HTML and exposing that data globally to the client. To avoid exposing globals we open sourced a tiny module called <a href="https://github.com/artsy/sharify">sharify</a>.</p></li>
</ol>


<h3>Sharing Templates</h3>

<p>Browserify even lets you share non-JavaScript components server/client using <a href="https://github.com/substack/node-browserify#list-of-source-transforms">transforms</a>. To reuse our <a href="http://jade-lang.com/">jade</a> templates server/client it was a simple matter of using the <a href="https://github.com/OliverJAsh/node-jadeify2">jadeify</a> transform.</p>

<h3>All Together Now</h3>

<p>With templates and models require-able server/client, sharing rendering code became much simpler. Below is an example using the same artwork model and detail template server/client.</p>

<p>Shared Backbone &#8220;Artwork&#8221; model to be required server/client:</p>

<figure class='code'><figcaption><span>models/artwork.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Backbone</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;backbone&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">API_URL</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;sharify&#39;</span><span class="p">).</span><span class="nx">data</span><span class="p">.</span><span class="nx">API_URL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">Artwork</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">url</span><span class="o">:</span> <span class="nx">API_URL</span> <span class="o">+</span> <span class="s1">&#39;/api/v1/artwork&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Shared partial jade template used server/client:</p>

<figure class='code'><figcaption><span>templates/artwork-details.jade</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='jade'><span class='line'><span class="nt">h1</span><span class="p">=</span> <span class="n">artwork</span><span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="-Symbol">&#39;artist</span><span class="err">&#39;</span><span class="o">).</span><span class="n">name</span>
</span><span class='line'><span class="nt">h2</span><span class="p">=</span> <span class="n">artwork</span><span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="-Symbol">&#39;title</span><span class="err">&#39;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Full server-side page template including the partial:</p>

<figure class='code'><figcaption><span>templates/artwork-page.jade</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='jade'><span class='line'><span class="nt">doctype</span> 5
</span><span class='line'><span class="nt">html</span>
</span><span class='line'>  <span class="nt">head</span>
</span><span class='line'>    <span class="nt">title</span> Artsy | <span class="si">#{</span><span class="n">artwork</span><span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="-Symbol">&#39;title</span><span class="err">&#39;</span><span class="o">)</span><span class="si">}</span>
</span><span class='line'>  <span class="nt">body</span>
</span><span class='line'>    <span class="nt">include</span> artwork-details
</span><span class='line'>    <span class="err">!= </span><span class="nt">sharify</span><span class="nc">.script</span>()
</span></code></pre></td></tr></table></div></figure>


<p>Route handler that uses the model server-side:</p>

<figure class='code'><figcaption><span>app.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//...</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Artwork</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;models/artwork.js&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/artwork/:id&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">new</span> <span class="nx">Artwork</span><span class="p">({</span> <span class="nx">id</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span> <span class="p">}).</span><span class="nx">fetch</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">artwork</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Boostrap artwork data into sharify</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">locals</span><span class="p">.</span><span class="nx">sharify</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">ARTWORK_JSON</span> <span class="o">=</span> <span class="nx">artwork</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">();</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;artwork-page&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">artwork</span><span class="o">:</span> <span class="nx">artwork</span> <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Client side code that requires the partial template and model:</p>

<figure class='code'><figcaption><span>client.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Artwork</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;models/artwork.js&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">ARTWORK_JSON</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;sharify&#39;</span><span class="p">).</span><span class="nx">data</span><span class="p">.</span><span class="nx">ARTWORK_JSON</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">detailsTemplate</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;templates/artwork-details.jade&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">artwork</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Artwork</span><span class="p">(</span><span class="nx">ARTWORK_JSON</span><span class="p">);</span>
</span><span class='line'><span class="nx">artwork</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">detailsTemplate</span><span class="p">({</span> <span class="nx">artwork</span><span class="o">:</span> <span class="nx">artwork</span> <span class="p">}));</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Developer Happiness</h2>

<p><img src="http://artsy.github.io/images/2013-12-18-rendering-on-the-server-and-client-in-node-dot-js/so-much-win.png" alt="Happy Developer Image" /></p>

<p>Not only does sharing code server/client let you easily optimize page rendering for fast page loads, but development becomes a lot nicer because we can reuse server-side JavaScript tools including&#8230;</p>

<h3>Package Managers</h3>

<p>With Browserify we were able to use npm as a package manager for server or client-side dependencies. There are <a href="http://bower.io/">other</a> <a href="http://component.io/">package</a> <a href="http://jamjs.org/">managers</a> for the client-side. However, because we were already using npm (and npm supports git urls), we could usually point to the project hosted on npm or Github without having to fork it.</p>

<p>For projects that don&#8217;t support CommonJS modules (or npm), often one can still use npm and requires like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;devDependencies&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;zepto&quot;</span><span class="p">:</span> <span class="s2">&quot;git://github.com/madrobby/zepto.git#c074a94f0f26dc946f1c501f5f45d603adada44d&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>client.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Require the base Zepto library (attaches `Zepto` to window)</span>
</span><span class='line'><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;zepto/src/zepto.js&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// Attach Zepto&#39;s plugins</span>
</span><span class='line'><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;zepto/src/event.js&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;zepto/src/detect.js&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// ....</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Testing</h3>

<p>Testing is light-years ahead because you can test all of your code in Node headless. I wrote <a href="http://artsy.github.io/blog/2013/06/14/writing-headless-backbone-tests-with-node-dot-js/">an article</a> on this a while back, and now with Browserify it&#8217;s even better.</p>

<p>Models, templates, and other modules that are shared server/client can be required into <a href="http://visionmedia.github.io/mocha/">mocha</a> and tested server-side without extra effort. For more view-like client-side code that depends on DOM APIs, pre-rendered HTML, etc., we open sourced a library called <a href="https://github.com/craigspaeth/benv">benv</a> to help build a fake browser environment in Node for testing.</p>

<h3>Modularity</h3>

<p>We wanted to avoid a monolithic organization that groups code by type such as &#8220;stylesheets&#8221;, &#8220;javascripts&#8221;, &#8220;controllers&#8221;, etc.. Not only is this a maintenance problem as it makes boundaries of your app unclear, but it also affects your users because it encourages grouping assets into large monolithic packages that take a long time to download.</p>

<p>Instead, we borrowed a page from <a href="http://stackoverflow.com/questions/2472984/django-and-project-application-organization">Django</a> and broke up our project into smaller conceptual pieces called &#8220;apps&#8221; (small express sub-applications mounted into the main project) and &#8220;components&#8221; (portions of reusable UI such as a modal widget). This let us easily maintain decoupled segments of our project and build up smaller asset packages through Browserify&#8217;s <code>require</code>s and <a href="http://learnboost.github.io/stylus/docs/import.html">Stylus</a>&#8217; <code>import</code>s. For more details on how this is done please check out <a href="http://ezeljs.com/">Ezel</a>, its <a href="https://github.com/artsy/ezel#project-vs-apps-vs-components">organization</a>, and <a href="https://github.com/artsy/ezel#asset-pipeline">asset pipeline</a> docs.</p>

<p>It&#8217;s also worth noting, to avoid CSS spaghetti we followed a simple convention of name-spacing all of our classes/ids by the app or component name it was a part of. This was inspired by a <a href="http://philipwalton.com/articles/css-architecture/">blog post from Philip Walton</a>.</p>

<h2>Success!</h2>

<p>With this new architecture and set of Node tools we&#8217;ve seen enormous benefits compared to the pains of developing Backbone in a monolithic project with lacking JavaScript tools. Our mobile web experience is much better, we can render more content on the server for SEO and faster page loads, our test/build/deploy cycles went from hours to minutes, our developer on-boarding time went from days to minutes, and overall developer happiness has significantly improved.</p>

<p>It&#8217;s an exciting time to be developing JavaScript apps and we will continue to open source our efforts wherever possible. Thanks and <a href="https://github.com/artsy">follow us on Github</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Upgrading to Mongoid 4.x]]></title>
    <link href="http://artsy.github.io/blog/2013/11/07/upgrading-to-mongoid4/"/>
    <updated>2013-11-07T12:34:00-05:00</updated>
    <id>http://artsy.github.io/blog/2013/11/07/upgrading-to-mongoid4</id>
    <content type="html"><![CDATA[<p>I recently went through an exercise of upgrading one of Artsy&#8217;s largest web projects to the current HEAD of Mongoid 4.x. This is going to be a major release with numerous changes and I wanted to flush out bugs before the final version of the ODM is released. All Mongoid changes currently live on <a href="https://github.com/mongoid/mongoid">master</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;mongoid&#39;</span><span class="p">,</span> <span class="ss">github</span><span class="p">:</span> <span class="s1">&#39;mongoid/mongoid&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the process I&#8217;ve worked on making a few gems compatible with Mongoid 4 and learned a couple of things that should help you make this process smooth for your own applications.</p>

<!-- more -->


<h2>Moped::BSON::ObjectId</h2>

<p>Moped&#8217;s BSON implementation has been removed in favor of the MongoDB bson gem 2.0 and higher. All <code>Moped::BSON</code> references must change to <code>BSON</code>. This is rather annoying and forces many libraries to have to fork behavior at runtime.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Mongoid</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">mongoid3?</span>
</span><span class='line'>    <span class="o">::</span><span class="no">Mongoid</span><span class="o">.</span><span class="n">const_defined?</span> <span class="ss">:Observer</span> <span class="c1"># deprecated in Mongoid 4.x</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">mongoid2?</span>
</span><span class='line'>    <span class="o">::</span><span class="no">Mongoid</span><span class="o">.</span><span class="n">const_defined?</span> <span class="ss">:Contexts</span> <span class="c1"># deprecated in Mongoid 3.x</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>mongoid2?</code> implementation is borrowed from <a href="https://github.com/pyromaniac/mongoid_orderable">mongoid_orderable</a> and I wrote the <code>mongoid3?</code> version by parsing the CHANGELOG - observers are deprecated in 4.0.</p>

<p>Now, instead of calling <code>Moped::BSON::ObjectId.legal?(id)</code>, you have to do something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="no">Mongoid</span><span class="o">.</span><span class="n">mongoid3?</span>
</span><span class='line'>  <span class="ss">Moped</span><span class="p">:</span><span class="ss">:BSON</span><span class="o">::</span><span class="no">ObjectId</span><span class="o">.</span><span class="n">legal?</span> <span class="nb">id</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="ss">BSON</span><span class="p">:</span><span class="ss">:ObjectId</span><span class="o">.</span><span class="n">legal?</span> <span class="nb">id</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Furthermore, you can no longer convert a string into a <code>Moped::BSON::ObjectId(id)</code>, you must explicitly call <code>from_string</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="no">Mongoid</span><span class="o">.</span><span class="n">mongoid3?</span>
</span><span class='line'>  <span class="ss">Moped</span><span class="p">:</span><span class="ss">:BSON</span><span class="o">::</span><span class="no">ObjectId</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="ss">BSON</span><span class="p">:</span><span class="ss">:ObjectId</span><span class="o">.</span><span class="n">from_string</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Libraries should then adjust their dependencies on Mongoid and specify <code>&gt;= 3.0</code>, and maybe <code>&lt; 5.0</code>.</p>

<h2>Testing Against Multiple Mongoid Versions</h2>

<p>The <a href="https://github.com/pyromaniac/mongoid_orderable">mongoid-orderable</a> gem has a neat system for testing against all versions of Mongoid with <a href="https://travis-ci.org/">Travis CI</a>. First, the <em>.travis.yml</em> file declares a test matrix that sets <code>MONGOID_VERSION</code>. Note that Mongoid 3.x or newer doesn&#8217;t run with Ruby 1.8.x or 1.9.2.</p>

<figure class='code'><figcaption><span>.travis.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">rvm</span><span class="p">:</span>
</span><span class='line'>  <span class="o">-</span> <span class="mi">1</span><span class="o">.</span><span class="mi">8</span><span class="o">.</span><span class="mi">7</span>
</span><span class='line'>  <span class="o">-</span> <span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span>
</span><span class='line'>  <span class="o">-</span> <span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span>
</span><span class='line'>  <span class="o">-</span> <span class="n">ruby</span><span class="o">-</span><span class="n">head</span>
</span><span class='line'>
</span><span class='line'><span class="ss">env</span><span class="p">:</span>
</span><span class='line'>  <span class="o">-</span> <span class="no">MONGOID_VERSION</span><span class="o">=</span><span class="mi">2</span>
</span><span class='line'>  <span class="o">-</span> <span class="no">MONGOID_VERSION</span><span class="o">=</span><span class="mi">3</span>
</span><span class='line'>  <span class="o">-</span> <span class="no">MONGOID_VERSION</span><span class="o">=</span><span class="mi">4</span>
</span><span class='line'>
</span><span class='line'><span class="ss">matrix</span><span class="p">:</span>
</span><span class='line'>  <span class="ss">exclude</span><span class="p">:</span>
</span><span class='line'>    <span class="o">-</span> <span class="ss">rvm</span><span class="p">:</span> <span class="mi">1</span><span class="o">.</span><span class="mi">8</span><span class="o">.</span><span class="mi">7</span>
</span><span class='line'>      <span class="ss">env</span><span class="p">:</span> <span class="no">MONGOID_VERSION</span><span class="o">=</span><span class="mi">3</span>
</span><span class='line'>    <span class="o">-</span> <span class="ss">rvm</span><span class="p">:</span> <span class="mi">1</span><span class="o">.</span><span class="mi">8</span><span class="o">.</span><span class="mi">7</span>
</span><span class='line'>      <span class="ss">env</span><span class="p">:</span> <span class="no">MONGOID_VERSION</span><span class="o">=</span><span class="mi">4</span>
</span><span class='line'>    <span class="o">-</span> <span class="ss">rvm</span><span class="p">:</span> <span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span>
</span><span class='line'>      <span class="ss">env</span><span class="p">:</span> <span class="no">MONGOID_VERSION</span><span class="o">=</span><span class="mi">3</span>
</span><span class='line'>    <span class="o">-</span> <span class="ss">rvm</span><span class="p">:</span> <span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span>
</span><span class='line'>      <span class="ss">env</span><span class="p">:</span> <span class="no">MONGOID_VERSION</span><span class="o">=</span><span class="mi">4</span>
</span><span class='line'>
</span><span class='line'><span class="ss">services</span><span class="p">:</span> <span class="n">mongodb</span>
</span></code></pre></td></tr></table></div></figure>


<p>The library&#8217;s <em>Gemfile</em> locks a different version depending on the environment variable, defaulting to 3.x. You can also test against a very specific version, if you must.</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s2">&quot;http://rubygems.org&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gemspec</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="n">version</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;MONGOID_VERSION&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="s2">&quot;~&gt; 3.1&quot;</span>
</span><span class='line'><span class="k">when</span> <span class="sr">/4/</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s2">&quot;mongoid&quot;</span><span class="p">,</span> <span class="ss">:github</span> <span class="o">=&gt;</span> <span class="s1">&#39;mongoid/mongoid&#39;</span>
</span><span class='line'><span class="k">when</span> <span class="sr">/3/</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s2">&quot;mongoid&quot;</span><span class="p">,</span> <span class="s2">&quot;~&gt; 3.1&quot;</span>
</span><span class='line'><span class="k">when</span> <span class="sr">/2/</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s2">&quot;mongoid&quot;</span><span class="p">,</span> <span class="s2">&quot;~&gt; 2.8&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s2">&quot;mongoid&quot;</span><span class="p">,</span> <span class="n">version</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Upgraded Gems</h2>

<p>I used the above method to make a few gems Mongoid 4.x compatible, via the following pull requests.</p>

<ul>
<li><a href="https://github.com/digitalplaywright/mongoid-slug/pull/146">mongoid-slug</a></li>
<li><a href="https://github.com/dblock/mongoid-scroll/commit/b67e2867b133cd6bd1b8361ea51409f80ae91ffd">mongoid-scroll</a></li>
<li><a href="https://github.com/pyromaniac/mongoid_orderable/pull/18">mongoid_orderable</a></li>
<li><a href="https://github.com/aq1018/mongoid-history/pull/83">mongoid-history</a></li>
<li><a href="https://github.com/aaw/mongoid_collection_snapshot/pull/5">mongoid_collection_snapshot</a></li>
<li><a href="https://github.com/joeyAghion/delayed_job_shallow_mongoid/pull/6">delayed_job_shallow_mongoid</a></li>
</ul>


<h2>Upgrading a Rails Project</h2>

<p>If you&#8217;re using Rails, you&#8217;re in for upgrading both Mongoid 4.x and Rails to 4.x. This means you will suffer a lot of pain trying to find compatible versions of various interdependent gems. I suggest locking Rails, Mongoid and ActiveSupport to begin with.</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;rails&#39;</span><span class="p">,</span> <span class="s1">&#39;4.0.1&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;activesupport&#39;</span><span class="p">,</span> <span class="s1">&#39;4.0.1&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;mongoid&#39;</span><span class="p">,</span> <span class="ss">github</span><span class="p">:</span> <span class="s1">&#39;mongoid/mongoid&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bulk search &amp; replace <code>Moped::BSON::ObjectId</code> references.</p>

<p>Calls to <code>inc</code>, <code>set</code> and <code>add_to_set</code> now take hashes, eg. <code>artist.inc(likes_count: 1)</code>.</p>

<p>If you&#8217;re converting Mongoid objects to JSON and seeing data such as <code>{ "$oid" =&gt; "..." }</code> instead of an ID, monkey-patch <code>BSON::ObjectId.as_json</code>. See <a href="https://groups.google.com/forum/#!msg/mongoid/MaXFVw7D_4s/T3sl6Flg428J">this discussion thread</a>.</p>

<figure class='code'><figcaption><span>config/initializers/bson/object_id.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">BSON</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">ObjectId</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">as_json</span><span class="p">(</span><span class="n">options</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>      <span class="nb">to_s</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&#8217;re using Warden (including via Devise) and/or rely on session cookies that may contain a user ID, add an implementation for the deprecated <code>Moped::BSON::Document</code>. This will prevent all old cookies from causing a serialization error and logging all those users out.</p>

<figure class='code'><figcaption><span>config/initializers/bson/</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Moped</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">BSON</span>
</span><span class='line'>    <span class="no">ObjectId</span> <span class="o">=</span> <span class="o">::</span><span class="ss">BSON</span><span class="p">:</span><span class="ss">:ObjectId</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Document</span> <span class="o">&lt;</span> <span class="no">Hash</span>
</span><span class='line'>      <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">deserialize</span><span class="p">(</span><span class="n">io</span><span class="p">,</span> <span class="n">document</span> <span class="o">=</span> <span class="kp">new</span><span class="p">)</span>
</span><span class='line'>          <span class="n">__bson_load__</span><span class="p">(</span><span class="n">io</span><span class="p">,</span> <span class="n">document</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">serialize</span><span class="p">(</span><span class="n">document</span><span class="p">,</span> <span class="n">io</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="n">document</span><span class="o">.</span><span class="n">__bson_dump__</span><span class="p">(</span><span class="n">io</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Updates</h2>

<p>Please post your updates below and questions to the <a href="https://groups.google.com/forum/#!forum/mongoid">mongoid mailing list</a>. I&#8217;ll update this post up until Mongoid 4.x ships.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to AWS OpsWorks]]></title>
    <link href="http://artsy.github.io/blog/2013/08/27/introduction-to-aws-opsworks/"/>
    <updated>2013-08-27T12:31:00-04:00</updated>
    <id>http://artsy.github.io/blog/2013/08/27/introduction-to-aws-opsworks</id>
    <content type="html"><![CDATA[<p>OpsWorks is a new service from Amazon that promises to provide high-level tools to manage your EC2-based deployment. From <a href="http://aws.typepad.com/aws/2013/02/aws-opsworks-flexible-application-management-in-the-cloud.html">the announcement</a>:</p>

<blockquote><p>AWS OpsWorks features an integrated management experience for the entire application lifecycle including resource provisioning, configuration management, application deployment, monitoring, and access control. It will work with applications of any level of complexity and is independent of any particular architectural pattern.</p></blockquote>

<p>After scratching our heads about exactly what that meant, we tried it anyway. If you&#8217;ve been straining at the limits of your Platform as a Service (PaaS) provider, or just wishing for more automation for your EC2 deployment, you may want to try it out too.</p>

<p>Artsy has been experimenting with OpsWorks for a few months now and recently adopted it for the production <a href="http://artsy.net">artsy.net</a> site. We&#8217;re excited to share what we&#8217;ve learned in the process.</p>

<p><img class="screenshot" src="http://artsy.github.io/images/2013-08-27-introduction-to-aws-opsworks/opsworks.png" title="[OpsWorks overview]" ></p>

<!-- more -->


<h2>Why OpsWorks?</h2>

<p>If you&#8217;ve worked with the confusing array of AWS services in the past, you&#8217;re already wondering how OpsWorks fits in. Amazon&#8217;s own <a href="http://aws.amazon.com/elasticbeanstalk/">Elastic Beanstalk</a> or PaaS providers such as <a href="http://heroku.com">Heroku</a> typically focus on making your application as simple as possible to deploy. You don&#8217;t have to worry about the underlying hardware or virtual resources; the platform manages that transparently. Dependencies (such as a data-store, cache, or email server) often take the form of external services.</p>

<p>But this simplicity comes at a cost. Your application&#8217;s architecture is constrained to a few common patterns. Your functionality may be limited by the system packages available in the standardized environment, or your performance may be limited by the available resources. OpsWorks offers more flexibility and control, allowing you to customize the types of servers you employ and the layers or services that make up your application. It&#8217;s a lower-level tool than those PaaS providers.</p>

<p>Conversely, OpsWorks offers higher-level control than <a href="https://aws.amazon.com/cloudformation/">CloudFormation</a> or than managing EC2 instances and related services directly. By focusing on the most commonly used AWS services, instance types, and architectures, it can provide greater automation and more robust tools for configuration, authorization, scaling, and monitoring. Amazon CTO <a href="http://www.allthingsdistributed.com/2013/02/aws-opsworks.html">Werner Vogels</a> rendered it thus:</p>

<p><img class="screenshot" src="http://artsy.github.io/images/2013-08-27-introduction-to-aws-opsworks/aws_control.png" title="[How OpsWorks fits in AWS offerings]" ></p>

<p>Historically, Artsy delegated dev-ops concerns to Heroku. They worried about infrastructure, freeing us to focus on our application&#8217;s higher-level goals. Increasingly though, we were forced to work around limitations of the platform&#8217;s performance, architecture, and customizability. (We even blogged about it <a href="http://artsy.github.io/blog/2012/01/31/beyond-heroku-satellite-delayed-job-workers-on-ec2/">here</a>, <a href="http://artsy.github.io/blog/2012/11/15/how-to-monitor-503s-and-timeout-on-heroku/">here</a>, <a href="http://artsy.github.io/blog/2012/12/13/beat-heroku-60-seconds-application-boot-timeout-with-a-proxy/">here</a>, <a href="http://artsy.github.io/blog/2013/02/01/master-heroku-command-line-with-heroku-commander/">here</a>, and <a href="http://artsy.github.io/blog/2013/02/17/impact-of-heroku-routing-mesh-and-random-routing/">here</a>.) Rather than continue to work against the platform, we turned to OpsWorks for greater flexibility while keeping administrative burden low.</p>

<h2>OpsWorks Overview</h2>

<p>OpsWorks comes with a new vocabulary. Let&#8217;s look at the major concepts:</p>

<ul>
<li>A <em><strong>Stack</strong></em> is the highest-level container. It groups custom configuration and houses one or more applications. To manage a simple to-do list site, you&#8217;d create a <em>todo</em> stack, although you might choose to have separate <em>todo-production</em> and <em>todo-staging</em> stacks.</li>
<li>Each stack has one or more <em><strong>Layers</strong></em>. Think of these as definitions for different server roles. A simple static web site might have a single Nginx layer. A typical web application might instead have a load-balancer layer, a Rails layer, and a MySQL layer. OpsWorks defines plenty of <a href="http://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers.html">built-in layers</a> (for Rails, HAProxy, PHP, Node, Memcached, MySQL, etc.), but you can also define your own.</li>
<li><em><strong>Applications</strong></em> are your code, sourced from a git or subversion repository, an S3 bucket, or even an external web site. A typical Rails site might have a single application defined, but you can define multiple applications if you&#8217;d like to configure, scale, and monitor them together.</li>
<li>Finally, we define <em><strong>Instances</strong></em> and assign each to one or more layers. These are the EC2 servers themselves. You can start instances manually, or configure them to start and stop on a schedule or in response to load patterns.</li>
</ul>


<h2>Configuring your stack</h2>

<p>If your app employs a common architecture, you can probably use the OpsWorks dashboard to define layers, add a few instances, link your git repo and be up and running. Examples:</p>

<ul>
<li>A static web site hosted on Nginx</li>
<li>A single-server PHP app</li>
<li>A Rails app with an <a href="http://haproxy.1wt.eu/">HAProxy</a> load-balancer, unicorn app servers, and MySQL database</li>
<li>A Node.js app using <a href="http://aws.amazon.com/elasticloadbalancing/">Elastic Load Balancer</a> and a Memcached cache</li>
</ul>


<p>You can find <a href="http://docs.aws.amazon.com/opsworks/latest/userguide/walkthroughs.html">detailed walk-throughs</a> of a few such common use cases in the OpsWorks docs.</p>

<p><img class="screenshot" src="http://artsy.github.io/images/2013-08-27-introduction-to-aws-opsworks/standard_instances.png" title="[PHP app instances (image from AWS blog)]" ></p>

<p>If the built-in layers don&#8217;t quite satisfy your needs, there are several facilities for customization. But first, it&#8217;s useful to understand how OpsWorks manages your instances.</p>

<h3>Chef cookbooks</h3>

<p>OpsWorks uses <a href="http://www.opscode.com/chef/">Chef</a> to configure EC2 instances. If you&#8217;re unfamiliar, Chef is a popular tool for making server configuration more automated and repeatable&mdash;like code. The Chef &#8220;recipes&#8221; that configure each layer are open-source and available in the <a href="http://github.com/aws/opsworks-cookbooks">opsworks-cookbooks</a> github repo. (Cookbooks contain one or more &#8220;recipes&#8221;&mdash;get it?) There, you can see precisely what commands are run in response to server lifecycle events (i.e., as servers are started, configured, deployed to, and stopped). These recipes write out configuration files, restart services, authorize users for SSH access, ensure logs are rotated, etc.&mdash;everything typical deployments might need.</p>

<p>For example, the recipes that set up an HAProxy instance look like this:</p>

<p><img class="screenshot" src="http://artsy.github.io/images/2013-08-27-introduction-to-aws-opsworks/haproxy_recipes.png" title="[Built-in recipes for the HAProxy layer]" ></p>

<h3>Overriding configuration &#8220;attributes&#8221;</h3>

<p>Chef cookbooks accept parameters in the form of &#8220;node attributes.&#8221; The default attributes will serve you well in most cases. To override them, edit the stack&#8217;s <a href="http://docs.aws.amazon.com/opsworks/latest/userguide/workingstacks-json.html"><em>custom Chef JSON</em></a>. For example, to configure Unicorn to run 8 workers instead of 16 and Memcached to bind to port 11212 instead of 11211, you&#8217;d enter the following for your stack&#8217;s custom JSON:</p>

<p><img class="screenshot" src="http://artsy.github.io/images/2013-08-27-introduction-to-aws-opsworks/custom_json.png" title="'{&#34;rails:&#34; {&#34;max_pool_size&#34;: 8}, &#34;memcached&#34;: {&#34;port&#34;: 11212}}'" alt="'{&#34;rails:&#34; {&#34;max_pool_size&#34;: 8}, &#34;memcached&#34;: {&#34;port&#34;: 11212}}'"></p>

<h3>Custom cookbooks</h3>

<p>If setting node attributes isn&#8217;t sufficient, you can go further and override the files written out by your layer&#8217;s recipes. Simply toggle the <em>Use custom Chef cookbooks</em> option in your stack settings and provide a link to a git, subversion, S3, or HTTP location for your <a href="http://docs.aws.amazon.com/opsworks/latest/userguide/workingcookbook-installingcustom-enable.html">custom cookbooks</a>.</p>

<p><img class="screenshot" src="http://artsy.github.io/images/2013-08-27-introduction-to-aws-opsworks/custom_cookbooks.png" title="[Enabling custom cookbooks]" ></p>

<p>Your custom cookbooks bundle can also contain original or <a href="http://docs.opscode.com/essentials_cookbooks.html">borrowed</a> recipes that perform any other custom configuration. Tell OpsWorks when to run your recipes by associating them with the desired events in your layer settings. For example, we use custom recipes at our Rails layer&#8217;s <em>setup</em> stage to perform additional Nginx configuration, install a JavaScript runtime, and send logs to <a href="https://papertrailapp.com/">Papertrail</a>.</p>

<p><img class="screenshot" src="http://artsy.github.io/images/2013-08-27-introduction-to-aws-opsworks/custom_recipes.png" title="[custom Chef recipes]" ></p>

<p>OpsWorks shares details about the entire stack with recipes via node attributes, allowing custom recipes to connect to other instances as required.</p>

<h3>Custom layers</h3>

<p>If the built-in layers don&#8217;t satisfy your needs even after customization, you can create custom layers. The base OpsWorks configuration is provided (for SSH authorization, monitoring, etc.) and your custom recipes do the rest. For example, we created a custom layer to process background jobs:</p>

<p><img class="screenshot" src="http://artsy.github.io/images/2013-08-27-introduction-to-aws-opsworks/custom_layer.png" title="[custom background jobs layer]" ></p>

<p>Down the road, we might introduce additional layers for Redis, Solr, or MongoDB. (Even better, AWS may introduce built-in support for these.)</p>

<h2>Performance</h2>

<p>OpsWorks makes most <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">EC2 instance types</a> available, so we can choose an appropriate balance of CPU power, memory, disk space, network performance, and architecture for each instance. This can be a <em>huge</em> boon to the performance of resource-constrained applications. It probably still pales in comparison to running directly on physical hardware, but this benefit alone could make OpsWorks a worthwhile choice over providers of &#8220;standard&#8221; computing resources.</p>

<p>While not a rigorous comparison, the experience of one of our particularly memory-constrained applications illustrates this. The application&#8217;s responses took an average of 638 milliseconds when running on Heroku&#8217;s <a href="https://devcenter.heroku.com/articles/dyno-size">&#8220;2x&#8221; (1 GB) dynos</a>. The same application responded in only 134 milliseconds on OpsWorks-managed <em>m1.large</em> instances (with 7.5 GB). That&#8217;s a ~80% (5x) improvement!</p>

<p><img class="screenshot" src="http://artsy.github.io/images/2013-08-27-introduction-to-aws-opsworks/new_relic_comparison.png" title="[OpsWorks performance superimposed on Heroku performance (chart: New Relic)]" ></p>

<h2>Troubleshooting</h2>

<p>That&#8217;s all well and good, but what about when things <em>aren&#8217;t</em> working?</p>

<p>We&#8217;ve experienced our fair share of failures with both OpsWorks and Heroku. PaaS providers like Heroku offer a pleasant abstraction, but in doing so reduce our visibility into the systems running our application. (Want to know why a dyno seems to be performing poorly? Good luck diagnosing resource contention, disk space problems, or network latency.) Instead, we&#8217;re reduced to repeatedly issuing restart commands.</p>

<p>In contrast, I can easily SSH into an OpsWorks instance and notice that a runaway process has pegged the CPU or that a chatty log has filled the disk. (Of course, the additional control afforded by OpsWorks increases the chance that I&#8217;ve caused the problem myself.)</p>

<p>Which do we prefer? We&#8217;d probably be safer with Heroku&#8217;s experts in charge, but I&#8217;ll happily accept light sysadmin duties in exchange for the flexibility OpsWorks affords. And by sticking with the OpsWorks default recipes as much as possible, we benefit from the platform&#8217;s combined experience.</p>

<h2>Scaling and recovery</h2>

<p>Scalability and recovery are critical, so how does OpsWorks compare to full-featured PaaS providers? Pretty well, actually.</p>

<p>OpsWorks instances can be launched in multiple AWS availability zones for greater redundancy. And if an instance fails for any reason, OpsWorks will stop it and start a new one in its place.</p>

<p>Especially useful is the automatic scaling, which can be time-based or load-based. This nicely matches  the horizontal scaling needs of our app: we&#8217;ve chosen to run additional Rails app servers during peak business hours, and additional background workers when load on existing servers exceeds a certain threshold.</p>

<p><img class="screenshot" src="http://artsy.github.io/images/2013-08-27-introduction-to-aws-opsworks/time-based_scaling.png" title="[time-based scaling]" ></p>

<p><img class="screenshot" src="http://artsy.github.io/images/2013-08-27-introduction-to-aws-opsworks/load-based_scaling.png" title="[load-based scaling]" ></p>

<p>When background workers are busy, new instances spin up automatically to tackle the growing queue. <em>That</em> is dev-ops gold.</p>

<h2>Monitoring</h2>

<p>OpsWorks provides a monitoring view of each stack, with CPU, memory, load, and process statistics aggregated by layer. You can drill down to individual instances and review periods anywhere from 1 hour to 2 weeks long.</p>

<p><img class="screenshot" src="http://artsy.github.io/images/2013-08-27-introduction-to-aws-opsworks/monitoring.png" title="[OpsWorks monitoring view]" ></p>

<p>We haven&#8217;t tried it, but OpsWorks also offers a built-in <a href="http://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-ganglia.html">Ganglia layer</a> that automatically collects metrics from each of your stack&#8217;s instances.</p>

<p>Conveniently, AWS also sends these metrics to its own <a href="http://aws.amazon.com/cloudwatch/">CloudWatch</a> monitoring service, where you can configure custom alerts.</p>

<h2>Integration with other AWS services</h2>

<p>You might be noticing a theme here: OpsWorks leverages AWS&#8217;s other tools and services quite a bit.</p>

<p><a href="http://aws.amazon.com/iam/">Identity and Access Management (IAM)</a> allows you to define individual user accounts within an umbrella account for your organization. These users can be authorized for varying levels of access to your OpsWorks stacks. From the <em>Permissions</em> view of each stack, you can then grant them SSH and <em>sudo</em> rights on an individual basis.</p>

<p><img class="screenshot" src="http://artsy.github.io/images/2013-08-27-introduction-to-aws-opsworks/permissions.png" title="[OpsWorks permissions view]" ></p>

<p>Other tools such as the <a href="https://console.aws.amazon.com/ec2">EC2 Dashboard</a> and <a href="http://docs.aws.amazon.com/AWSRubySDK/latest/frames.html">AWS API</a> work as you&#8217;d hope, with all of the usual functions being applicable to your OpsWorks-managed instances and other services like elastic IPs and EBS volumes.</p>

<h2>Cost</h2>

<p>Pricing is simple and enticing. There&#8217;s no charge for using OpsWorks; you pay only for your underlying usage of other AWS resources like EC2 instances, S3 storage, bandwidth, elastic IPs, etc. If you&#8217;ve purchased <a href="http://aws.amazon.com/ec2/reserved-instances/">reserved instances</a>, those savings will apply as usual.</p>

<p>Unfortunately, OpsWorks doesn&#8217;t yet support <a href="http://aws.amazon.com/ec2/spot-instances/">spot instances</a> (but I imagine that&#8217;s in the works).</p>

<h2>Roadmap</h2>

<p>In the few months since its launch, OpsWorks has added support for <a href="http://aws.amazon.com/elasticloadbalancing/">ELB</a>, monitoring, custom AMIs, and more recent versions of Chef and Ruby. There&#8217;s also an <a href="https://forums.aws.amazon.com/forum.jspa?forumID=153">active discussion forum</a> where developers and Amazon employees circulate issues and request features. It&#8217;s a relatively new service and can occasionally be rough around the edges, but&#8211;knowing AWS&#8211;we expect the current pace of enhancements to continue.</p>

<p>We&#8217;ve already launched one major app on OpsWorks and will be looking for more opportunities as it gains a following and grows in sophistication.</p>

<p><em>Look for a follow-up post where we document our experience transitioning an app from Heroku to OpsWorks!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Normalizing GMail E-Mail Addresses with CanonicalEmails]]></title>
    <link href="http://artsy.github.io/blog/2013/06/23/normalizing-gmail-email-addresses-with-canonical-emails/"/>
    <updated>2013-06-23T12:21:00-04:00</updated>
    <id>http://artsy.github.io/blog/2013/06/23/normalizing-gmail-email-addresses-with-canonical-emails</id>
    <content type="html"><![CDATA[<p>A whopping 49% of Artsy users have &#8220;gmail.com&#8221; email addresses. The next domain name, &#8220;hotmail.com&#8221;, doesn&#8217;t even come close, with only 6%.</p>

<p><img src="http://artsy.github.io/images/2013-06-23-normalizing-gmail-email-addresses-with-canonical-emails/artsy-email-domains.png" /></p>

<p>GMail addresses ignore periods and are case-insensitive. For example, &#8220;Donald.Duck@gmail.com&#8221; and &#8220;donaldduck@gmail.com&#8221; are the same account. You can log-in to GMail with both. Users often register with the former and try to log-in to Artsy with the latter. With so many GMail users, expect a dozen support emails per day.</p>

<p>The solution is to normalize these emails into a canonical form.</p>

<!-- more -->


<p>We use our newly open-sourced gem called <a href="https://github.com/dblock/canonical-emails">canonical-emails</a>. It patches <code>Mail::Address</code> methods at runtime.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">CanonicalEmails</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">GMail</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">transform</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>      <span class="ss">Mail</span><span class="p">:</span><span class="ss">:Address</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">value</span><span class="p">)</span><span class="o">.</span><span class="n">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">email</span><span class="o">|</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">email</span><span class="o">.</span><span class="n">domain</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> <span class="s2">&quot;gmail.com&quot;</span> <span class="o">].</span><span class="n">include?</span><span class="p">(</span><span class="n">email</span><span class="o">.</span><span class="n">domain</span><span class="o">.</span><span class="n">downcase</span><span class="p">)</span>
</span><span class='line'>          <span class="n">email</span><span class="o">.</span><span class="n">instance_eval</span> <span class="k">do</span>
</span><span class='line'>            <span class="k">def</span> <span class="nf">get_local</span>
</span><span class='line'>              <span class="n">value</span> <span class="o">=</span> <span class="k">super</span>
</span><span class='line'>              <span class="n">value</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">downcase</span> <span class="k">if</span> <span class="n">value</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>            <span class="k">def</span> <span class="nf">domain</span>
</span><span class='line'>              <span class="n">value</span> <span class="o">=</span> <span class="k">super</span>
</span><span class='line'>              <span class="n">value</span><span class="o">.</span><span class="n">downcase</span> <span class="k">if</span> <span class="n">value</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>        <span class="k">end</span> <span class="k">if</span> <span class="n">value</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It would be great to see contributions to our gem if you have knowledge of special handling with other email providers!</p>

<p>On the application side, Artsy stores both the original email address entered by the user and the canonical representation and perform all lookups by the canonical value.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Mongoid</span><span class="p">:</span><span class="ss">:Document</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">CanonicalEmail</span><span class="p">:</span><span class="ss">:Extensions</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="nb">String</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:lookup_email</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="nb">String</span>
</span><span class='line'>  <span class="n">before_save</span> <span class="ss">:update_lookup_email</span>
</span><span class='line'>  <span class="n">canonical_email</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">CanonicalEmails</span><span class="p">:</span><span class="ss">:GMail</span><span class="p">,</span> <span class="ss">CanonicalEmails</span><span class="p">:</span><span class="ss">:Downcase</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">find_by_email</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
</span><span class='line'>    <span class="n">email</span> <span class="o">=</span> <span class="ss">CanonicalEmails</span><span class="p">:</span><span class="ss">:GMail</span><span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="n">email</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>    <span class="n">email</span> <span class="o">=</span> <span class="ss">CanonicalEmails</span><span class="p">:</span><span class="ss">:Downcase</span><span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="n">email</span><span class="p">)</span><span class="o">.</span><span class="n">address</span>
</span><span class='line'>    <span class="n">first</span><span class="p">(</span><span class="n">lookup_email</span><span class="p">:</span> <span class="n">email</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update_lookup_email</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">lookup_email</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">canonical_email</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>What is your email domain breakdown? Here&#8217;s the MongoDB/Mongoid/ruby map/reduce that I used to get the graph above.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">map</span> <span class="o">=</span> <span class="sx">%Q{</span>
</span><span class='line'><span class="sx">  function() {</span>
</span><span class='line'><span class="sx">    emit((this.email).split(&quot;@&quot;)[1], { count: 1 });</span>
</span><span class='line'><span class="sx">  }</span>
</span><span class='line'><span class="sx">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">reduce</span> <span class="o">=</span> <span class="sx">%Q{</span>
</span><span class='line'><span class="sx">  function(key, values) {</span>
</span><span class='line'><span class="sx">    var result = { count: 0 };</span>
</span><span class='line'><span class="sx">    values.forEach(function(value) {</span>
</span><span class='line'><span class="sx">      result.count += value.count;</span>
</span><span class='line'><span class="sx">    });</span>
</span><span class='line'><span class="sx">    return result;</span>
</span><span class='line'><span class="sx">  }</span>
</span><span class='line'><span class="sx">}</span>
</span><span class='line'>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">map_reduce</span><span class="p">(</span><span class="n">map</span><span class="p">,</span> <span class="n">reduce</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">out</span><span class="p">(</span><span class="ss">inline</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">sort_by</span><span class="p">{</span> <span class="o">|</span><span class="n">v</span><span class="o">|</span> <span class="o">-</span><span class="n">v</span><span class="o">[</span><span class="s2">&quot;value&quot;</span><span class="o">][</span><span class="s2">&quot;count&quot;</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'>  <span class="o">.</span><span class="n">take</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">v</span><span class="o">|</span> <span class="p">{</span> <span class="n">v</span><span class="o">[</span><span class="s2">&quot;_id&quot;</span><span class="o">]</span> <span class="o">=&gt;</span> <span class="n">v</span><span class="o">[</span><span class="s2">&quot;value&quot;</span><span class="o">][</span><span class="s2">&quot;count&quot;</span><span class="o">]</span> <span class="o">/</span> <span class="no">User</span><span class="o">.</span><span class="n">count</span> <span class="p">}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Raw output for our top 10.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span>
</span><span class='line'>  <span class="p">{</span> <span class="s2">&quot;gmail.com&quot;</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mi">49</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s2">&quot;hotmail.com&quot;</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mo">06</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s2">&quot;yahoo.com&quot;</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mo">057</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s2">&quot;aol.com&quot;</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mo">017</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s2">&quot;me.com&quot;</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mo">015</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s2">&quot;mac.com&quot;</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mo">012</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s2">&quot;comcast.net&quot;</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mo">00</span><span class="mi">8</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s2">&quot;msn.com&quot;</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mo">003</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s2">&quot;mail.ru&quot;</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mo">003</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="s2">&quot;verizon.net&quot;</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mo">003</span> <span class="p">}</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding API Docs with Grape and Swagger]]></title>
    <link href="http://artsy.github.io/blog/2013/06/21/adding-api-documentation-with-grape-swagger/"/>
    <updated>2013-06-21T12:21:00-04:00</updated>
    <id>http://artsy.github.io/blog/2013/06/21/adding-api-documentation-with-grape-swagger</id>
    <content type="html"><![CDATA[<p>The Artsy website, Partner CMS, mobile tools, and all our hackathon experiments are built on top of a core API. We&#8217;ve put a lot of effort into documenting it internally. But developers don&#8217;t want to have to grok through code. With <a href="https://github.com/intridea/grape">Grape</a> and <a href="https://developers.helloreverb.com/swagger">Swagger</a>, adding an API explorer and exposing the API documentation has never been easier.</p>

<p><img src="http://artsy.github.io/images/2013-06-21-adding-api-documentation-with-grape-swagger/swagger-ui.png" /></p>

<!-- more -->


<h3>Cross Origin Requests</h3>

<p>You don&#8217;t need to include the API explorer into your application. Instead, enable Cross-Origin Resource Sharing (CORS) with <a href="https://github.com/cyu/rack-cors">rack-cors</a>.</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;rack-cors&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">use</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:Cors</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">allow</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">origins</span> <span class="s1">&#39;*&#39;</span>
</span><span class='line'>    <span class="n">resource</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="ss">headers</span><span class="p">:</span> <span class="ss">:any</span><span class="p">,</span> <span class="nb">methods</span><span class="p">:</span> <span class="ss">:get</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Your application will now respond to <code>OPTIONS</code> and <code>GET</code> requests with CORS headers. It&#8217;s also important to verify that errors still contain CORS headers, as shown in these RSpec tests.</p>

<figure class='code'><figcaption><span>spec/cors_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">context</span> <span class="s2">&quot;CORS&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;supports options&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">options</span> <span class="s2">&quot;/&quot;</span><span class="p">,</span> <span class="p">{},</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;HTTP_ORIGIN&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;http://cors.example.com&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;HTTP_ACCESS_CONTROL_REQUEST_HEADERS&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Origin, Accept, Content-Type&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;HTTP_ACCESS_CONTROL_REQUEST_METHOD&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;GET&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">last_response</span><span class="o">.</span><span class="n">status</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="mi">200</span>
</span><span class='line'>    <span class="n">last_response</span><span class="o">.</span><span class="n">headers</span><span class="o">[</span><span class="s1">&#39;Access-Control-Allow-Origin&#39;</span><span class="o">].</span><span class="n">should</span> <span class="o">==</span> <span class="s2">&quot;http://cors.example.com&quot;</span>
</span><span class='line'>    <span class="n">last_response</span><span class="o">.</span><span class="n">headers</span><span class="o">[</span><span class="s1">&#39;Access-Control-Expose-Headers&#39;</span><span class="o">].</span><span class="n">should</span> <span class="o">==</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;includes Access-Control-Allow-Origin in the response&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">get</span> <span class="s2">&quot;/&quot;</span><span class="p">,</span> <span class="p">{},</span> <span class="s2">&quot;HTTP_ORIGIN&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;http://cors.example.com&quot;</span>
</span><span class='line'>    <span class="n">last_response</span><span class="o">.</span><span class="n">status</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="mi">200</span>
</span><span class='line'>    <span class="n">last_response</span><span class="o">.</span><span class="n">headers</span><span class="o">[</span><span class="s1">&#39;Access-Control-Allow-Origin&#39;</span><span class="o">].</span><span class="n">should</span> <span class="o">==</span> <span class="s2">&quot;http://cors.example.com&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;includes Access-Control-Allow-Origin in errors&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">get</span> <span class="s2">&quot;/invalid&quot;</span><span class="p">,</span> <span class="p">{},</span> <span class="s2">&quot;HTTP_ORIGIN&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;http://cors.example.com&quot;</span>
</span><span class='line'>    <span class="n">last_response</span><span class="o">.</span><span class="n">status</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="mi">404</span>
</span><span class='line'>    <span class="n">last_response</span><span class="o">.</span><span class="n">headers</span><span class="o">[</span><span class="s1">&#39;Access-Control-Allow-Origin&#39;</span><span class="o">].</span><span class="n">should</span> <span class="o">==</span> <span class="s2">&quot;http://cors.example.com&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Grape-Swagger</h3>

<p>There&#8217;s a gem called <a href="https://github.com/tim-vandecasteele/grape-swagger">grape-swagger</a> that exposes Swagger-compatible documentation from any Grape API with a one-liner, <code>add_swagger_documentation</code>.</p>

<figure class='code'><figcaption><span>api.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Acme</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">API</span> <span class="o">&lt;</span> <span class="ss">Grape</span><span class="p">:</span><span class="ss">:API</span>
</span><span class='line'>    <span class="nb">format</span> <span class="ss">:json</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">desc</span> <span class="s2">&quot;This is the root of our API.&quot;</span>
</span><span class='line'>    <span class="n">get</span> <span class="s2">&quot;/&quot;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">add_swagger_documentation</span> <span class="n">api_version</span><span class="p">:</span> <span class="s1">&#39;v1&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>spec/documentation_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;swagger documentation&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">get</span> <span class="s2">&quot;/api/swagger_doc&quot;</span>
</span><span class='line'>  <span class="n">last_response</span><span class="o">.</span><span class="n">status</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="mi">200</span>
</span><span class='line'>  <span class="n">json_response</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">last_response</span><span class="o">.</span><span class="n">body</span><span class="p">)</span>
</span><span class='line'>  <span class="n">json_response</span><span class="o">[</span><span class="s2">&quot;apiVersion&quot;</span><span class="o">].</span><span class="n">should</span> <span class="o">==</span> <span class="s2">&quot;v1&quot;</span>
</span><span class='line'>  <span class="n">json_response</span><span class="o">[</span><span class="s2">&quot;apis&quot;</span><span class="o">].</span><span class="n">size</span><span class="o">.</span><span class="n">should</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Swagger UI</h3>

<p>Use the <a href="http://petstore.swagger.wordnik.com">Swagger Petstore</a>, start your application, enter <em>http://localhost:9292/api/swagger_doc</em> and explore your API!</p>

<p><img src="http://artsy.github.io/images/2013-06-21-adding-api-documentation-with-grape-swagger/swagger-ping.png" /></p>

<h3>Working Sample</h3>

<p>You can find a working sample in <a href="https://github.com/dblock/grape-on-rack">this demo application</a>, added in <a href="https://github.com/dblock/grape-on-rack/commit/004670804472812322b089fcf6a40b33d68c699c">this commit</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing Headless Backbone Tests With Node.js]]></title>
    <link href="http://artsy.github.io/blog/2013/06/14/writing-headless-backbone-tests-with-node-dot-js/"/>
    <updated>2013-06-14T17:48:00-04:00</updated>
    <id>http://artsy.github.io/blog/2013/06/14/writing-headless-backbone-tests-with-node-dot-js</id>
    <content type="html"><![CDATA[<h2>TL;DR</h2>

<p>Write fast, headless, tests for Backbone using Node.js. See this project as an example  <a href="https://github.com/craigspaeth/backbone-headless-testing">https://github.com/craigspaeth/backbone-headless-testing</a>.</p>

<h2>A Brief History</h2>

<p>Artsy is mostly a thick client <a href="http://backbonejs.org/">Backbone</a> app that sits on <a href="http://rubyonrails.org/">Rails</a> and largely depends on <a href="http://jnicklas.github.io/capybara/">Capybara</a> (<a href="http://docs.seleniumhq.org/">Selenium</a> backed bot that clicks around Firefox) for testing it&#8217;s javascript. This leads to some seriously brittle and slow integration tests. <a href="http://artsy.github.io/blog/2012/02/03/reliably-testing-asynchronous-ui-w-slash-rspec-and-capybara/">Despite being able to wrangle Capybara</a> to do most of our client-side testing, we knew there must be a better way.</p>

<p>When building a CMS app for our gallery partners to manage their Artsy inventory, we built a new Backbone app on top of <a href="http://nodejs.org/">node.js</a>. The result was a headless test suite that runs around 60 times faster.</p>

<p>Let&#8217;s take a look at how it&#8217;s done.</p>

<!-- more -->


<h2>Setting Up The Environment</h2>

<p>The trick to testing client-side code in node.js is creating an environment that mimics the browser. <a href="https://github.com/tmpvar/jsdom">Jsdom</a> does just that by bringing a pure javascript implementation of the DOM to node.js.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">jsdom</span><span class="p">.</span><span class="nx">env</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">html</span><span class="o">:</span> <span class="s2">&quot;&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">done</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">errs</span><span class="p">,</span> <span class="nb">window</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">global</span><span class="p">.</span><span class="nb">window</span> <span class="o">=</span> <span class="nb">window</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// ... </span>
</span><span class='line'>    <span class="nx">callback</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point we&#8217;ve globally exposed the <code>window</code> object of our jsdom browser. However the DOM isn&#8217;t the only global dependency in most of our client-side code. We&#8217;ll also need to expose our common libraries like Backbone, Underscore, and jQuery.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">global</span><span class="p">.</span><span class="nb">window</span> <span class="o">=</span> <span class="nb">window</span><span class="p">;</span>
</span><span class='line'><span class="nx">global</span><span class="p">.</span><span class="nx">Backbone</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../app/javascripts/vendor/backbone.js&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">global</span><span class="p">.</span><span class="nx">Underscore</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../app/javascripts/vendor/underscore.js&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">global</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../app/javascripts/vendor/jQuery.js&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can simply require Backbone, Underscore, and jQuery like any node module because they follow <a href="http://wiki.CommonJS.org/wiki/Modules/1.1.1">CommonJS</a> convention. However not all libraries are CommonJS compatible, and in this case you might have to expose their attachment to <code>window</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">global</span><span class="p">.</span><span class="nb">window</span> <span class="o">=</span> <span class="nb">window</span><span class="p">;</span>
</span><span class='line'><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../app/javascripts/vendor/zepto.js&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">global</span><span class="p">.</span><span class="nx">Zepto</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">Zepto</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally you probably have a namespace like <code>App</code> which your components attach to.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">global</span><span class="p">.</span><span class="nb">window</span> <span class="o">=</span> <span class="nb">window</span><span class="p">;</span>
</span><span class='line'><span class="c1">// Libraries</span>
</span><span class='line'><span class="nx">global</span><span class="p">.</span><span class="nx">Backbone</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../app/javascripts/vendor/backbone.js&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">global</span><span class="p">.</span><span class="nx">Underscore</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../app/javascripts/vendor/underscore.js&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">global</span><span class="p">.</span><span class="nx">jQuery</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../app/javascripts/vendor/jQuery.js&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// Namespace</span>
</span><span class='line'><span class="nx">global</span><span class="p">.</span><span class="nx">App</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="c1">// We&#39;re ready to test some Backbone components</span>
</span></code></pre></td></tr></table></div></figure>


<p>Try to keep global dependencies to a minimum. This reduces setup/teardown, increases modularity, and makes it easier to test your code.</p>

<p>For example, instead of attaching a view to <code>App</code> it might be better to pass that view in to the options of another so you can call <code>this.options.header.doSomething()</code>.</p>

<h2>Unit Testing Models</h2>

<p>Because all good javascript guides are based off Todo apps, let&#8217;s pretend we&#8217;re testing a Todo model.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">Todo</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Models</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">urlRoot</span><span class="o">:</span> <span class="s1">&#39;/api/todo&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">complete</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/api/todos/&#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;/complete&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;PUT&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">self</span><span class="p">.</span><span class="nx">set</span><span class="p">({</span> <span class="nx">completed</span><span class="o">:</span> <span class="kc">true</span> <span class="p">});</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s test that <code>#complete</code> makes the proper API PUT and <code>completed</code> is updated to true. After we setup our jsdom environment we need to stub <code>$.ajax</code> using <a href="http://sinonjs.org/docs/#stubs">sinon</a> as we won&#8217;t be sending XHRs in node.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">before</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">jsdom</span><span class="p">.</span><span class="nx">env</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">html</span><span class="o">:</span> <span class="s2">&quot;&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">done</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">errs</span><span class="p">,</span> <span class="nb">window</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">global</span><span class="p">.</span><span class="nx">$</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../../app/javascripts/vendor/jquery.js&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">//...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">ajaxStub</span> <span class="o">=</span> <span class="nx">sinon</span><span class="p">.</span><span class="nx">stub</span><span class="p">(</span><span class="nx">$</span><span class="p">,</span> <span class="s1">&#39;ajax&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">todo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Todo</span><span class="p">({</span> <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Feed the cat&#39;</span><span class="p">,</span> <span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;feed-the-cat&#39;</span> <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can simply assert that <code>$.ajax</code> was called with the right params and completed changed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s1">&#39;PUTs to the API&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">todo</span><span class="p">.</span><span class="nx">complete</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">.</span><span class="nx">args</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="nx">type</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">&#39;PUT&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">.</span><span class="nx">args</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="nx">url</span><span class="p">.</span><span class="nx">should</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">&#39;/api/todos/feed-the-cat/complete&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s1">&#39;updates the item to be completed&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">todo</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;completed&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">.</span><span class="nx">args</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="nx">success</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">todo</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;completed&#39;</span><span class="p">).</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Unit Testing Views</h2>

<p>Models are easy to unit test because they&#8217;re mostly self-contained javascript. However a Backbone view might expect some server-side rendered HTML, use client-side templates, communicate to other views, and so on. This makes it harder to test but manageable given our set up.</p>

<p>Let&#8217;s pretend we have a view that renders our todo list inside a server-side rendered element, and uses a client-side template to fill in the actual list items.</p>

<p>Our DOM might look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&#39;todos&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h1&gt;</span>Things I need to do today<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&#39;todos-list&#39;</span><span class="nt">&gt;&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>and our view might look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">TodosListView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#todos&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">template</span><span class="o">:</span> <span class="nx">JST</span><span class="p">[</span><span class="s1">&#39;todos/list_items&#39;</span><span class="p">],</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;add remove&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.todos-list&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">template</span><span class="p">({</span> <span class="nx">todos</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">models</span> <span class="p">}));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can render the server-side <code>#todos</code> element by compiling the express view into html and injecting it straight in jsdom with our globally exposed jQuery.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">filename</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">&#39;../app/views/index.jade&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">template</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="nx">filename</span><span class="p">).</span><span class="nx">toString</span><span class="p">();</span>
</span><span class='line'><span class="nx">html</span> <span class="o">=</span> <span class="nx">jade</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">template</span><span class="p">,</span> <span class="p">{</span> <span class="nx">filename</span><span class="o">:</span> <span class="nx">filename</span> <span class="p">})();</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;html&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">html</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next we need to expose our client-side templates. In this case I&#8217;m assuming client-side templates are pre-compiled into functions namespaced under a global JST object like in the <a href="http://guides.rubyonrails.org/asset_pipeline.html">Rail&#8217;s asset pipeline</a> (if you&#8217;re looking for a node.js tool <a href="https://github.com/craigspaeth/nap">nap</a> is what Artsy uses).</p>

<p>We need to mimic what the JST functions are expecting so that when calling <code>JST['foo/bar']({ foo: 'some-data' })</code> we get back a string of html.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">global</span><span class="p">.</span><span class="nx">JST</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">filename</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span>
</span><span class='line'>  <span class="nx">__dirname</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;../app/javascripts/templates/todos/list.jade&#39;</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="nx">JST</span><span class="p">[</span><span class="s1">&#39;todos/list&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">jade</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span>
</span><span class='line'>  <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="nx">filename</span><span class="p">).</span><span class="nx">toString</span><span class="p">(),</span>
</span><span class='line'>  <span class="p">{</span> <span class="nx">filename</span><span class="o">:</span> <span class="nx">filename</span> <span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>With our server-side HTML injected and our client-side templates ready to use, all that&#8217;s needed is to require any other dependent Backbone components. This boilerplate can get pretty repetitive and would be good to wrap up into a helper.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">clientenv</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../helpers/clientenv&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">before</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">clientenv</span><span class="p">.</span><span class="nx">setup</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">global</span><span class="p">.</span><span class="nx">App</span><span class="p">.</span><span class="nx">Todo</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../app/javascripts/models/todo.js&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">global</span><span class="p">.</span><span class="nx">App</span><span class="p">.</span><span class="nx">Todos</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../app/javascripts/collections/todos.js&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">done</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">templateFilename</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span>
</span><span class='line'>        <span class="nx">__dirname</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;../../views/index.jade&#39;</span>
</span><span class='line'>      <span class="p">),</span>
</span><span class='line'>      <span class="nx">html</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;jade&#39;</span><span class="p">).</span><span class="nx">compile</span><span class="p">(</span>
</span><span class='line'>        <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="nx">templateFilename</span><span class="p">).</span><span class="nx">toString</span><span class="p">(),</span>
</span><span class='line'>        <span class="p">{</span> <span class="nx">filename</span><span class="o">:</span> <span class="nx">templateFilename</span> <span class="p">}</span>
</span><span class='line'>      <span class="p">)();</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;html&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">html</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">view</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">App</span><span class="p">.</span><span class="nx">TodosListView</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">done</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s1">&#39;renders items as they are added&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">view</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">add</span><span class="p">([</span>
</span><span class='line'>    <span class="k">new</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Todo</span><span class="p">({</span> <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;clean the kitchen&#39;</span> <span class="p">})</span>
</span><span class='line'>  <span class="p">]);</span>
</span><span class='line'>  <span class="nx">view</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">html</span><span class="p">().</span><span class="nx">should</span><span class="p">.</span><span class="nx">include</span><span class="p">(</span><span class="s1">&#39;clean the kitchen&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>With a little bit more work, testing views in node can be almost as easy as testing models.</p>

<h2>Integration Tests</h2>

<p>Although I encourage writing way more unit test coverage as they&#8217;re faster and less brittle, it is necessary to have integration tests to cover longer scenarios. At Artsy we use some tricks to make integration testing less painful.</p>

<h3>Stubbing the API Layer</h3>

<p>In Artsy&#8217;s case we&#8217;re consuming a JSON API service that already has ample test coverage, so it makes sense to cut off integration at this point and stub our API responses.</p>

<p>To do this we can conditionally check which environment we&#8217;re running in and swap out the API to use a real API or an <a href="http://expressjs.com/">express</a> app serving a stubbed API.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;env&#39;</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;test&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;api url&#39;</span><span class="p">,</span> <span class="s1">&#39;http://localhost:5000&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// Create a mock api server in your test helpers </span>
</span><span class='line'>  <span class="c1">// and run it on 5000 in a before block</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;api url&#39;</span><span class="p">,</span> <span class="s1">&#39;http://api.my-app.com&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// Bootstrap in your server-side view so the client app</span>
</span><span class='line'><span class="c1">// knows where to point</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">locals</span><span class="p">.</span><span class="nx">API_URL_ROOT</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;api url&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>If our API was hosted on the same server as our client app, or we&#8217;re proxying API calls because of lack of <a href="http://en.wikipedia.org/wiki/Cross-Origin_Resource_Sharing">CORS</a> support, this could be as easy as swapping out middleware.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;env&#39;</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;test&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/api&#39;</span><span class="p">,</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./test/helpers/mock_api&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/api&#39;</span><span class="p">,</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./routes/api&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This speeds up integration tests and simplifies the stack by not populating a database or booting an API server.</p>

<h3>Headless Integration Tests with Zombie.js</h3>

<p>Selenium has to actually boot up Firefox and poll the UI to wait for things to appear. This disconnect means extra seconds of &#8220;wait_util we&#8217;re sure&#8221; time.  <a href="http://zombie.labnotes.org/">Zombie.js</a> is backed by our friend jsdom and alleviates these issues by giving us a fast headless browser that we can programmatically access.</p>

<p>Of course the caveat to headless testing is that you can&#8217;t visually see how a test is actually failing. Using <code>{ debug: true }</code> in your options will spit every Zombie action to stdout. In most cases this is enough, but sometimes you need to go a step further and actually visualize what the test is doing.</p>

<p>A trick we use is to write tests using the browser&#8217;s <code>jQuery</code>. This is more familiar than Zombie&#8217;s DSL and lets you copy and paste test code directly in your browser&#8217;s console to see if it&#8217;s actually doing what you want.</p>

<p>.e.g</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Browser</span><span class="p">.</span><span class="nx">visit</span><span class="p">(</span><span class="s1">&#39;http://localhost:5000&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">browser</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">$</span> <span class="o">=</span> <span class="nx">browser</span><span class="p">.</span><span class="nb">window</span><span class="p">.</span><span class="nx">$</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// From here we can run `NODE_ENV=test node app.js` and copy</span>
</span><span class='line'>  <span class="c1">// this code right into our browser&#39;s console.</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#add-todo&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="s1">&#39;Foo&#39;</span><span class="p">).</span><span class="nx">change</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Using these techniques has greatly increased productivity and developer happiness for testing client-side code. For an example implementation of this see <a href="https://github.com/craigspaeth/backbone-headless-testing">https://github.com/craigspaeth/backbone-headless-testing</a>.</p>

<p>Looking forward, testing client-side code can be made even better by using a package manager that adds require functionality like <a href="https://github.com/substack/node-browserify">browserify</a>, <a href="https://github.com/component/component">component</a>, or <a href="http://requirejs.org/">require.js</a>. But I&#8217;ve gone far enough for now, maybe in another blog post (leave a comment if you&#8217;re interested).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bootstrapping JSON Data with Rails and Backbone.js]]></title>
    <link href="http://artsy.github.io/blog/2013/04/13/bootstrapping-json-data-with-rails-and-backbone-js/"/>
    <updated>2013-04-13T12:21:00-04:00</updated>
    <id>http://artsy.github.io/blog/2013/04/13/bootstrapping-json-data-with-rails-and-backbone-js</id>
    <content type="html"><![CDATA[<p>The <a href="http://artsy.net">artsy.net website</a> is a Backbone.js application that talks to a server-side RESTful Grape API sitting on top of a Rails app which serves minimal HTML markup. The latter includes such things as a page title, along with links to JavaScript and stylesheet packages. A page loads, scripts run, data is fetched from the API. The result is merged into a HAMLJS template and rendered client-side.</p>

<p>Building this kind of one-page apps allows for clean separation between the presentation and API layers. The downside is that it will slow page render times - fetching data after page load means waiting for an AJAX request to complete before displaying anything.</p>

<p>There&#8217;re many solutions to this problem, all involving some kind of server-side rendering. You could, for example, share views and JavaScript between client and server. This would be a major paradigm shift for a large application like ours and not something we could possibly maneuver in a short amount of time.</p>

<p>Without changing the entire architecture of the system, how can we bootstrap JSON data server-side and avoid the data roundtrip on every page load?</p>

<!-- more -->


<h3>Model Repository</h3>

<p>First, we need to keep track of our objects on the client. We&#8217;ve implemented a simple data repository. It ensures that the same model is passed around instead of instantiating new models each time. This helps prevent unnecessary trips to the server, and makes sure events are bound to the same model instance.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">App.Repository =</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Gets a model from the repository or fetches it from the server.</span>
</span><span class='line'>  <span class="nv">getOrFetch: </span><span class="nf">(id, options) -&gt;</span>
</span><span class='line'>    <span class="nv">model = </span><span class="nx">@get</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">model</span><span class="o">?</span>
</span><span class='line'>      <span class="nx">options</span><span class="o">?</span><span class="p">.</span><span class="nx">success</span><span class="o">?</span> <span class="nx">options</span><span class="p">,</span> <span class="nx">model</span>
</span><span class='line'>      <span class="nx">model</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nv">model = </span><span class="k">new</span> <span class="nx">@model</span><span class="p">({</span> <span class="nv">id: </span><span class="nx">id</span> <span class="p">})</span>
</span><span class='line'>      <span class="nx">model</span><span class="p">.</span><span class="nx">fetch</span> <span class="nx">options</span>
</span><span class='line'>      <span class="nx">@add</span> <span class="nx">model</span>
</span><span class='line'>    <span class="nx">model</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Function to extend a collection in to a repository</span>
</span><span class='line'><span class="nv">App.Repository.extend = </span><span class="nf">(collectionClass) -&gt;</span>
</span><span class='line'>  <span class="nv">collection = </span><span class="k">new</span> <span class="nx">collectionClass</span>
</span><span class='line'>  <span class="nv">repository = </span><span class="nx">_</span><span class="p">.</span><span class="nx">extend</span> <span class="nx">collection</span><span class="p">,</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Repository</span>
</span><span class='line'>  <span class="nv">repository.collectionClass = </span><span class="nx">collectionClass</span>
</span><span class='line'>  <span class="nx">repository</span>
</span></code></pre></td></tr></table></div></figure>


<p>Objects of the same type are stored together in a repository collection.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Collections</span><span class="p">.</span><span class="nx">Artists</span> <span class="k">extends</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Collection</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">model: </span><span class="nx">App</span><span class="p">.</span><span class="nx">Models</span><span class="p">.</span><span class="nx">Artist</span>
</span><span class='line'>  <span class="nv">App.Repositories.Artists = </span><span class="nx">App</span><span class="p">.</span><span class="nx">Repository</span><span class="p">.</span><span class="nx">extend</span> <span class="nx">@</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Fetching Data</h3>

<p>A view requires data before it can be rendered. For example, navigating to <a href="http://artsy.net/artist/hendrik-kerstens">artsy.net/artist/hendrik-kerstens</a> (a Dutch photographer who obsessively took pictures of his daughter in all kinds of artificial setups for 20 years) will call the following.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Views</span><span class="p">.</span><span class="nx">ArtistView</span> <span class="k">extends</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">render: </span><span class="nf">-&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">App</span><span class="p">.</span><span class="nx">Repositories</span><span class="p">.</span><span class="nx">Artists</span><span class="p">.</span><span class="nx">getOrFetch</span> <span class="nx">@options</span><span class="p">.</span><span class="nx">artistId</span><span class="p">,</span>
</span><span class='line'>      <span class="nv">success: </span><span class="nf">(artist) =&gt;</span>
</span><span class='line'>        <span class="nx">@$el</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="nx">JST</span><span class="p">[</span><span class="s">&#39;templates/artist/show&#39;</span><span class="p">]({</span> <span class="nv">artist: </span><span class="nx">artist</span> <span class="p">}))</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Bootstrapping Data</h3>

<p>Since our implementation sits on top of a Rails app, we can now bootstrap the data in a server-side Rails view without any JavaScript code changes. The following example lives in <code>app/views/artists/_bootstrap.html.haml</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">:</span><span class="nx">javascript</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">json</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">parseJSON</span><span class="p">(</span><span class="s2">&quot;#{j @artist.to_json}&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">App</span><span class="p">.</span><span class="nx">Repositories</span><span class="p">.</span><span class="nx">Artists</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="k">new</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Models</span><span class="p">.</span><span class="nx">Artist</span><span class="p">(</span><span class="nx">json</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>You must encode JSON data inside a Rails template, otherwise unicode characters like U+2028 become actual line-endings. This has been discussed <a href="http://stackoverflow.com/questions/2965293/javascript-parse-error-on-u2028-unicode-character">here</a> and <a href="http://stackoverflow.com/questions/9691611/print-valid-non-escaped-json-in-a-view-with-rails">here</a>. The <code>j</code> above is an alias for <code>escape_javascript</code>.</p>

<p>The Rails view layout calls <code>yield :javascript</code> and the <code>show.html.haml</code> template includes the bootstrapped data as a partial.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="p">=</span> <span class="n">content_for</span> <span class="ss">:javascript</span> <span class="k">do</span>
</span><span class='line'>  <span class="p">=</span> <span class="n">render</span> <span class="ss">partial</span><span class="p">:</span> <span class="s2">&quot;artists/bootstrap&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The generated HTML includes the escaped JSON representation of the artist, which will be parsed client-side when the page loads and inserted into <code>App.Repositories.Artists</code>. The <code>App.Views.ArtistView</code> will no longer need to fetch the data from the server with an AJAX call.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ARAnalytics - Analytics for iOS Apps]]></title>
    <link href="http://artsy.github.io/blog/2013/04/10/aranalytics/"/>
    <updated>2013-04-10T17:23:00-04:00</updated>
    <id>http://artsy.github.io/blog/2013/04/10/aranalytics</id>
    <content type="html"><![CDATA[<p>In both my <a href="http://orta.github.com">personal apps</a> and Artsy Folio, I&#8217;m always after a deeper understanding of how people use the app. There&#8217;s three ways to do this: ask users, watch users and track usage. I&#8217;d like to talk about the third of these.</p>

<p>We&#8217;ve experimented with quite a lot of analytics tools for the Artsy website, and it seemed fitting to do the same for our mobile app. We wanted the freedom to change the analytics tool without having to change the code, and so <a href="http://github.com/orta/ARAnalytics">ARAnalytics</a> was born.</p>

<!-- more -->


<p>ARAnalytics is the adaption of <a href="https://github.com/jkrall/analytical">Analytical</a> and  <a href="http://segmentio.github.com/analytics.js/">Analytics.js</a> to iOS. By using <a href="http://cocoapods.org">Cocoapods</a> it became possible to set up the entire analytics stack with only a few lines of code in your <code>Podfile</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">pod</span> <span class="s2">&quot;ARAnalytics/Crashlytics&quot;</span>
</span><span class='line'>  <span class="n">pod</span> <span class="s2">&quot;ARAnalytics/Mixpanel&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The list of supported libraries is pretty vast ( <em>TestFlight, Mixpanel, Localytics, Flurry, Google Analytics, KISSMetrics, Countly, Crittercism, Bugsnag and Crashlytics</em> ) and the API for <code>ARAnalytics</code> tries to bridge any gaps it can find in the implementations.</p>

<p><code>ARAnalytics</code> simplifies the API to two main parts of tracking; user details and events. User details are things like your internal ID for a user, and custom properties like your app&#8217;s preferences, whilst events are temporal actions that are triggered based off user actions.</p>

<p>There is another tool worth mentioning and that is <a href="http://cocoadocs.org/dosets/Analytics/0.0.5/">Analytics</a> which is a new port of Analytics.js which does a similar <em>simple API to different analytics providers</em> but works by offloading the work to the server. I think there are advantages and disadvantages to both of these approaches, but I think one or the other should cover nearly all use cases!</p>

<p>ARAnalytics is available on Github at <a href="http://github.com/orta/ARAnalytics">orta/ARAnalytics</a> and documented on <a href="http://cocoadocs.org/docsets/ARAnalytics/1.2/">Cocoadocs</a> (which Artsy proudly sponsors!)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Easter Egg for Curl]]></title>
    <link href="http://artsy.github.io/blog/2013/04/01/an-easter-egg-for-curl/"/>
    <updated>2013-04-01T12:21:00-04:00</updated>
    <id>http://artsy.github.io/blog/2013/04/01/an-easter-egg-for-curl</id>
    <content type="html"><![CDATA[<p>Let&#8217;s implement an Easter egg that requires <a href="http://curl.haxx.se/">curl</a> and is HTTP-compliant.</p>

<p>We accept access tokens on our API endpoints. These can come from an <code>access_token</code> query string parameter.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl http://artsy.net/api/v1/system/up?access_token=invalid -v
</span><span class='line'>
</span><span class='line'>&lt; HTTP/1.1 401 Unauthorized
</span><span class='line'>&lt; Content-Type: application/json
</span><span class='line'>&lt; Content-Length: 24
</span><span class='line'>
</span><span class='line'>{ "error" : "Unauthorized" }</span></code></pre></td></tr></table></div></figure>


<p>So far, so good. Now try this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl http://artsy.net/api/v1/system/up?access_token=10013 -v
</span><span class='line'>
</span><span class='line'>&lt; HTTP/1.1 401 Broadway
</span><span class='line'>&lt; Content-Type: application/json
</span><span class='line'>&lt; Content-Length: 76
</span><span class='line'>
</span><span class='line'>{ "error" : "Inspiration from the Engineering team at http://artsy.github.com" }</span></code></pre></td></tr></table></div></figure>


<p>What?! <strong>401 Broadway</strong>? See, our office address is <em>401 Broadway, 10013, New York, NY</em>. We just tried to add a more developer-friendly way to find us in the New York grid. And here&#8217;s the view from our 25th floor office - that&#8217;s SOHO right below us and the Empire State Building a bit North.</p>

<p><img src="http://artsy.github.io/images/2013-04-01-an-easter-egg-for-curl/artsy-office-view.jpg" /></p>

<p>Photo by <a href="https://github.com/zamiang">@zamiang</a>.</p>

<p>Easter egg implementation follows.</p>

<!-- more -->


<p>Implementing a custom HTTP response is surprisingly hard with most web servers. Changing the text that follows error codes is not something most people need. Our API will have to return a custom error code and some monkey-patching will translate the status message. We use <a href="https://github.com/intridea/grape">grape</a>, which is Rack-based and supports inserting middleware, where we do authentication. We randomly chose the number 2600 for an internal status code.</p>

<figure class='code'><figcaption><span>api/api_action_dispatch_request.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApiActionDispatchRequest</span> <span class="o">&lt;</span> <span class="ss">ActionDispatch</span><span class="p">:</span><span class="ss">:Request</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">[]</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'>    <span class="n">params</span><span class="o">[</span><span class="n">key</span><span class="o">]</span> <span class="o">||</span> <span class="n">headers</span><span class="o">[</span><span class="s2">&quot;X_</span><span class="si">#{</span><span class="n">key</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">upcase</span><span class="si">}</span><span class="s2">&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>api/api_auth_middleware.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApiAuthMiddleware</span> <span class="o">&lt;</span> <span class="ss">Grape</span><span class="p">:</span><span class="ss">:Middleware</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">before</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">access_token</span> <span class="o">==</span> <span class="s2">&quot;10013&quot;</span>
</span><span class='line'>      <span class="kp">throw</span> <span class="ss">:error</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">message</span><span class="p">:</span> <span class="s1">&#39;Inspiration from the Engineering team at http://artsy.github.com&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">status</span><span class="p">:</span> <span class="mi">2600</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">access_token</span>
</span><span class='line'>      <span class="vi">@access_token</span> <span class="o">||=</span> <span class="n">request</span><span class="o">[</span><span class="ss">:access_token</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">request</span>
</span><span class='line'>      <span class="vi">@request</span> <span class="o">||=</span> <span class="no">ApiActionDispatchRequest</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>WEBrick</h3>

<figure class='code'><figcaption><span>config/initializers/broadway/webrick.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">WEBrick</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">HTTPResponse</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">status</span><span class="o">=</span><span class="p">(</span><span class="n">status</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">status</span> <span class="o">==</span> <span class="mi">2600</span>
</span><span class='line'>        <span class="vi">@status</span> <span class="o">=</span> <span class="mi">401</span>
</span><span class='line'>        <span class="vi">@reason_phrase</span> <span class="o">=</span> <span class="s2">&quot;Broadway&quot;</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="vi">@status</span> <span class="o">=</span> <span class="n">status</span>
</span><span class='line'>        <span class="vi">@reason_phrase</span> <span class="o">=</span> <span class="ss">HTTPStatus</span><span class="p">:</span><span class="ss">:reason_phrase</span><span class="p">(</span><span class="n">status</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Thin</h3>

<figure class='code'><figcaption><span>config/initializers/broadway/thin.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Thin</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Response</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">head</span>
</span><span class='line'>      <span class="k">if</span> <span class="vi">@status</span> <span class="o">==</span> <span class="mi">2600</span>
</span><span class='line'>        <span class="s2">&quot;HTTP/1.1 401 Broadway</span><span class="se">\r\n</span><span class="si">#{</span><span class="n">headers_output</span><span class="si">}</span><span class="se">\r\n</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="s2">&quot;HTTP/1.1 </span><span class="si">#{</span><span class="vi">@status</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="no">HTTP_STATUS_CODES</span><span class="o">[</span><span class="vi">@status</span><span class="o">.</span><span class="n">to_i</span><span class="o">]</span><span class="si">}</span><span class="se">\r\n</span><span class="si">#{</span><span class="n">headers_output</span><span class="si">}</span><span class="se">\r\n</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Unicorn</h3>

<figure class='code'><figcaption><span>config/initializers/broadway/unicorn.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;unicorn/http_response&#39;</span>
</span><span class='line'><span class="k">module</span> <span class="nn">Unicorn::HttpResponse</span>
</span><span class='line'>  <span class="no">CODES</span><span class="o">[</span><span class="mi">2600</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;401 Broadway&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>More Eggs?</h3>

<p>Check out <a href="http://artsy.net/humans.txt">artsy.net/humans.txt</a> for more Easter eggs and please feel free to email me at <strong>db[at]artsy[dot]net</strong> if you want to come visit or <a href="http://artsy.net/jobs">work here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Musical Chairs]]></title>
    <link href="http://artsy.github.io/blog/2013/03/29/musical-chairs/"/>
    <updated>2013-03-29T16:38:00-04:00</updated>
    <id>http://artsy.github.io/blog/2013/03/29/musical-chairs</id>
    <content type="html"><![CDATA[<p> At Artsy we make Artsy Folio. Folio is an awesome portfolio app that shows our gallery and museum partners their artworks in one place, allows them to easily get information about their inventory and to send works by email to their contacts.</p>

<p>Folio has to deal with large multi-gigabyte syncs in order to operate offline. That makes for a great user experience, but for the developer working on the sync, it&#8217;s not as pleasant. Combined with our use of Core Data, the app’s maturity, and dealing with data store migrations, things can get hairy. We needed a tool that could freeze and restore app data at will, obviating the need for constant syncing and resyncing.</p>

<p>That&#8217;s why I built <a href="https://github.com/orta/chairs">chairs</a>&#8230;</p>

<!--more-->


<p>Chairs is a gem you can install via <code>gem install chairs</code>. It allows you to stash and replace your current iOS simulator application state. It will grab everything related to the app ( including the current <code>NSUserDefaults</code>) and store it in a named subfolder in your current working directory. No black magic, just lots of copying files.</p>

<p>The command line interface is based on git, so to bring in the current state you run <code>chairs pull [name]</code> and to replace the state you use <code>chairs push [name]</code>. The name is just a label so you can remember which version corresponds to that musical chair. You can get a list of these by doing <code>chairs list</code>, and delete them with <code>chairs rm [name]</code>.</p>

<p>Besides the core functionality, chairs has a little bit of sugar to help you with related tasks. My personal favourite is <code>chairs open</code>; this will just open the folder of the most recently used app so you can go and have a snoop around. Amazing for making sure files are where they say they are or for opening your sqlite database in <a href="http://menial.co.uk/base/">Base</a>.</p>

<p>So <code>gem install chairs</code> or check out the <a href="https://github.com/orta/chairs">README</a> for some more information.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Impact of Heroku's Routing Mesh and Random Routing]]></title>
    <link href="http://artsy.github.io/blog/2013/02/17/impact-of-heroku-routing-mesh-and-random-routing/"/>
    <updated>2013-02-17T12:21:00-05:00</updated>
    <id>http://artsy.github.io/blog/2013/02/17/impact-of-heroku-routing-mesh-and-random-routing</id>
    <content type="html"><![CDATA[<p>The <a href="http://rapgenius.com/James-somers-herokus-ugly-secret-lyrics">Heroku&#8217;s Ugly Secret</a> blog post went viral last week. I <a href="http://code.dblock.org/in-defense-of-heroku">wrote</a> in defense of Heroku, which has now responded with an official <a href="https://blog.heroku.com/archives/2013/2/16/routing_performance_update/">Routing Performance Update</a>.</p>

<p>Random request queuing has been discussed in the past in <a href="http://tiwatson.com/blog/2011-2-17-heroku-no-longer-using-a-global-request-queue">Tim Watson&#8217;s post</a> based on a <a href="https://groups.google.com/forum/?fromgroups=#!msg/heroku/8eOosLC5nrw/Xy2j7GapebIJ">response</a> by Heroku&#8217;s Adam Wiggins. While the documentation may not have been accurate or even somewhat misleading, we, at Artsy, understood the strategy and the limitations of the routing mesh for quite sometime. Therefore, we have been making continuous efforts to improve our application&#8217;s performance and reduce the negative impact of random routing inside the routing mesh over the past few months.</p>

<p>One thing we didn&#8217;t do, was to measure the actual wait time inside a dyno. In restrospect, it seems obvious that we should have. In this post we&#8217;ll describe a middleware to do so. This is entirely based on the work of <a href="https://gist.github.com/daveyeu/4960893">David Yeu</a>, <a href="https://gist.github.com/jasonrclark/d82a1ea7695daac0b9ee">Jason R Clark</a> and RG&#8217;s own <a href="https://gist.github.com/a-warner/f5db30857ed3423cea79">Andrew Warner</a>.</p>

<p>With this code in place, here&#8217;s a 12 hour graph of our website&#8217;s API performance. The dyno wait time for our application, in green, averaged 61.1ms for a total of 301ms average per request, which is 1/5th of the total request time. It&#8217;s certainly a lot, but we do spend a lot more time in our own code.</p>

<p><img src="http://artsy.github.io/images/2013-02-17-impact-of-heroku-routing-mesh-and-random-routing/newrelic-12-hours.png"></p>

<p>Note that the single peak on the right of the graph corresponds to a dyno auto-scale job. We double the number of dynos with early morning traffic, which causes new dynos to boot up and accumulate requests before they are &#8220;warm&#8221; enough to process requests at their normal rate.</p>

<!-- more -->


<h3>Queue Logger Middleware</h3>

<p>Heroku adds an <code>X-Request-Start</code> header as documented <a href="https://devcenter.heroku.com/articles/http-routing">here</a> into every request it routes. We can then subtract the value of this header from <code>Time.now</code> once we&#8217;re inside our code. We&#8217;re also removing the the <code>X-Heroku-Queue-Wait-Time</code> header, as it&#8217;s mostly zero with the current Heroku routing strategy and gets <a href="https://github.com/newrelic/rpm/blame/master/lib/new_relic/agent/instrumentation/queue_time.rb#L90">used</a> as queue time by the NewRelic RPM. Finally, we&#8217;re setting <code>env['HTTP_X_QUEUE_TIME']</code>, which will be picked up by NewRelic as documented <a href="https://newrelic.com/docs/features/tracking-front-end-time">here</a> and adding a <code>X-Queue-Time</code> header to be able to see the queue time in every response with client tools.</p>

<figure class='code'><figcaption><span>config/queue_time_logger.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://gist.github.com/a-warner/f5db30857ed3423cea79</span>
</span><span class='line'><span class="c1"># combination of https://gist.github.com/daveyeu/4960893</span>
</span><span class='line'><span class="c1"># and https://gist.github.com/jasonrclark/d82a1ea7695daac0b9ee</span>
</span><span class='line'><span class="k">class</span> <span class="nc">QueueTimeLogger</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:app</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>    <span class="vi">@app</span> <span class="o">=</span> <span class="n">app</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>    <span class="n">now</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">to_f</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">env</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="s2">&quot;HTTP_X_HEROKU_QUEUE_WAIT_TIME&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">microseconds</span> <span class="o">=</span> <span class="p">(</span><span class="n">now</span> <span class="o">*</span> <span class="mi">1_000_000</span><span class="p">)</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>    <span class="n">env</span><span class="o">[</span><span class="s2">&quot;HTTP_X_MIDDLEWARE_START&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;t=</span><span class="si">#{</span><span class="n">microseconds</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">perf_headers</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">request_start</span> <span class="o">=</span> <span class="n">env</span><span class="o">[</span><span class="s2">&quot;HTTP_X_REQUEST_START&quot;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="n">request_start_microseconds</span> <span class="o">=</span> <span class="n">request_start</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="s2">&quot;t=&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">to_i</span> <span class="o">*</span> <span class="mi">1_000</span>
</span><span class='line'>      <span class="n">queue_time_microseconds</span> <span class="o">=</span> <span class="o">[</span> <span class="n">microseconds</span> <span class="o">-</span> <span class="n">request_start_microseconds</span><span class="p">,</span> <span class="mi">0</span> <span class="o">].</span><span class="n">max</span>
</span><span class='line'>      <span class="n">env</span><span class="o">[</span><span class="s2">&quot;HTTP_X_QUEUE_TIME&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;t=</span><span class="si">#{</span><span class="n">queue_time_microseconds</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">queue_time_milliseconds</span> <span class="o">=</span> <span class="p">(</span><span class="n">queue_time_microseconds</span> <span class="o">/</span> <span class="mi">1_000</span><span class="p">)</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>      <span class="n">perf_headers</span><span class="o">[</span><span class="s2">&quot;X-Queue-Time&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="n">queue_time_milliseconds</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">status</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">body</span> <span class="o">=</span> <span class="n">app</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>    <span class="o">[</span> <span class="n">status</span><span class="p">,</span> <span class="n">headers</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">perf_headers</span><span class="p">),</span> <span class="n">body</span> <span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We insert this middleware into Rails. Remember that the middleware is executed in reverse order, so you should put this in the end of your <code>config/environment.rb</code>.</p>

<figure class='code'><figcaption><span>config/environment.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../queue_time_logger&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">middleware</span><span class="o">.</span><span class="n">use</span> <span class="no">QueueTimeLogger</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Time Skew</h3>

<p>It&#8217;s important to note that since the <code>X-Request-Start</code> header is inserted by the router, we&#8217;re not capturing queue wait time, we&#8217;re capturing (queue wait time) + (clock skew between the router and the machine servicing the request). The time skew has a non-negligible contribution to the sum, especially that the sign of the clock skew contribution is unknown and we are replacing any negative time difference with 0. We can only hope that Heroku does a reasonable effort at synchronizing clocks between the router and the dyno servers.</p>

<h3>What About Dumb Routing?</h3>

<p>One of the basic issues with one-request-at-a-time web servers and random routing is how single-threaded web servers accept connections. It sounds technically feasible that the web server could report back to the router that it&#8217;s currently processing a request and have the router pick another dyno, but there&#8217;re two non-trivial difficulties with implementing this.</p>

<p>The first is that it would require cooperation from the Heroku router, as currently, closing a TCP socket would cause it to return a 503 to the client.</p>

<p>The second is in the way EventMachine accepts requests in a single-threaded scenario: a request will block the EventMachine reactor, and only once it has unblocked the reactor, will it accept more requests. Those requests will sit in the TCP queue for the duration of the long request, defeating the whole concept.</p>

<h3>Improving Throughput on Heroku</h3>

<p>It&#8217;s important to understand that with every system you will get increasingly unfair scheduling at the load balancer when you have more than your serviceable load. To improve this on Heroku you have to either reduce the time to service each request or provision more dynos. All things considered, I think that being able to service long-running requests without any significant impact on the entire distributed system would be a luxury.</p>

<h3>Links</h3>

<ul>
<li><a href="https://gist.github.com/a-warner/f5db30857ed3423cea79">Queue Logger Middleware</a></li>
<li><a href="http://rapgenius.com/James-somers-herokus-ugly-secret-lyrics">Heroku&#8217;s Ugly Secret</a></li>
<li><a href="http://code.dblock.org/in-defense-of-heroku">In Defense of Heroku</a></li>
<li><a href="https://blog.heroku.com/archives/2013/2/16/routing_performance_update">Heroku Routing Performance Update</a></li>
<li><a href="http://tiwatson.com/blog/2011-2-17-heroku-no-longer-using-a-global-request-queue">Heroku No Longer Using a Global Request Queue</a></li>
<li><a href="https://groups.google.com/d/msg/thin-ruby/7p5BHt5j7M4/GnRyUP0VTzgJ">How EventMachine Accepts Connections</a></li>
<li><a href="https://devcenter.heroku.com/articles/http-routing">Heroku HTTP Routing Documentation</a></li>
<li><a href="https://github.com/newrelic/rpm/blame/master/lib/new_relic/agent/instrumentation/queue_time.rb#L90">NewRelic Agent Instrumentation Queue Time Implementation</a></li>
<li><a href="https://newrelic.com/docs/features/tracking-front-end-time">Tracking Front-End Time with NewRelic</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
